//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class EtmiPlusClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = 'baseUrl' !== undefined && baseUrl !== null ? "http://localhost:5150" : "";

    }

    /**
     * @param body (optional) 
     * @return Success
     */
    algoritmo(idDiagnostico: number, body: AlgoritmoChagas | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Diagnostico/{idDiagnostico}/Chagas/Algoritmo";
        if (idDiagnostico === undefined || idDiagnostico === null)
            throw new Error("The parameter 'idDiagnostico' must be defined.");
        url_ = url_.replace("{idDiagnostico}", encodeURIComponent("" + idDiagnostico));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAlgoritmo(_response);
        });
    }

    protected processAlgoritmo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tratamiento(id: number, body: AplicacionPenicilinaBenzatinica | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Sifilis/AplicacionPenicilinaBenzatinica/{id}/Tratamiento";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTratamiento(_response);
        });
    }

    protected processTratamiento(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    retratamiento(id: number, body: AplicacionPenicilinaBenzatinica | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Sifilis/AplicacionPenicilinaBenzatinica/{id}/Retratamiento";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetratamiento(_response);
        });
    }

    protected processRetratamiento(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    seguimiento(id: number, body: AplicacionPenicilinaBenzatinica | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Sifilis/AplicacionPenicilinaBenzatinica/{id}/Seguimiento";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeguimiento(_response);
        });
    }

    protected processSeguimiento(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: Auth | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    chagas(idGestanteControl: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Chagas/{idGestanteControl}";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChagas(_response);
        });
    }

    protected processChagas(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    clasificacionNinoExpuesto(idGestante: number, body: ClasificacionNinoExpuestoHB | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{idGestante}/HepatitisB/ClasificacionNinoExpuesto";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClasificacionNinoExpuesto(_response);
        });
    }

    protected processClasificacionNinoExpuesto(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    diagnosticoEIntervencionNino(idGestante: number, body: DiagnosticoEIntervencionNino | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestante}/Sifilis/DiagnosticoEIntervencionNino";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDiagnosticoEIntervencionNino(_response);
        });
    }

    protected processDiagnosticoEIntervencionNino(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    diagnosticoEnfermedadGestante(idGestanteControl: number, body: DiagnosticoEnfermedadGestanteChagas | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/Chagas/DiagnosticoEnfermedadGestante";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDiagnosticoEnfermedadGestante(_response);
        });
    }

    protected processDiagnosticoEnfermedadGestante(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    diagnosticoGestante(idGestante: number, body: DiagnosticoGestanteHB | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestante}/HepatitisB/DiagnosticoGestante";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDiagnosticoGestante(_response);
        });
    }

    protected processDiagnosticoGestante(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    diagnosticoMaterno(idGestanteControl: number, body: DiagnosticoMaterno | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/Sifilis/DiagnosticoMaterno";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDiagnosticoMaterno(_response);
        });
    }

    protected processDiagnosticoMaterno(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    diagnosticoNinoExpuesto(idGestanteControl: number, body: DiagnosticoNinoExpuestoChagas | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/Chagas/DiagnosticoNinoExpuesto";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDiagnosticoNinoExpuesto(_response);
        });
    }

    protected processDiagnosticoNinoExpuesto(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    gestanteGET(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGestanteGET(_response);
        });
    }

    protected processGestanteGET(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    gestantePUT(id: number, body: Gestante | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGestantePUT(_response);
        });
    }

    protected processGestantePUT(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param filter (optional) 
     * @param page (optional) 
     * @param limit (optional) 
     * @return Success
     */
    gestanteGET2(filter: string | undefined, page: number | undefined, limit: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGestanteGET2(_response);
        });
    }

    protected processGestanteGET2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            console.log('respuesta get', response.data)
            const _responseText = response.data.data;
            return Promise.resolve<void>(_responseText as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    gestantePOST(body: IGestante | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            console.log('respuesta servicio', _response)
            return this.processGestantePOST(_response);
        });
    }

    protected processGestantePOST(response: AxiosResponse): Promise<void> {
        console.log(response)
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(_responseText as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    gestanteControlGET(idGestante: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{idGestante}/GestanteControl";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGestanteControlGET(_response);
        });
    }

    protected processGestanteControlGET(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    gestanteControlPOST(idGestante: number, body: GestanteControl | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{idGestante}/GestanteControl";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGestanteControlPOST(_response);
        });
    }

    protected processGestanteControlPOST(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    hepatitisBAll( cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/HepatitisB";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHepatitisBAll(_response);
        });
    }

    protected processHepatitisBAll(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hepatitisBPOST(body: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/HepatitisB";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHepatitisBPOST(_response);
        });
    }

    protected processHepatitisBPOST(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    hepatitisBGET(id: number, cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/HepatitisB/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHepatitisBGET(_response);
        });
    }

    protected processHepatitisBGET(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hepatitisBPUT(id: number, body: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/HepatitisB/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHepatitisBPUT(_response);
        });
    }

    protected processHepatitisBPUT(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    hepatitisBDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/HepatitisB/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHepatitisBDELETE(_response);
        });
    }

    protected processHepatitisBDELETE(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    paraclinicoMadre(idReporte: number, body: ParaclinicoMadre | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Reporte1/{idReporte}/VIH/ParaclinicoMadre";
        if (idReporte === undefined || idReporte === null)
            throw new Error("The parameter 'idReporte' must be defined.");
        url_ = url_.replace("{idReporte}", encodeURIComponent("" + idReporte));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParaclinicoMadre(_response);
        });
    }

    protected processParaclinicoMadre(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    paraclinicoNino(idReporte: number, body: ParaclinicoNino | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Reporte5/{idReporte}/VIH/ParaclinicoNino";
        if (idReporte === undefined || idReporte === null)
            throw new Error("The parameter 'idReporte' must be defined.");
        url_ = url_.replace("{idReporte}", encodeURIComponent("" + idReporte));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParaclinicoNino(_response);
        });
    }

    protected processParaclinicoNino(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    parametrica(nombre: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Parametrica/{Nombre}";
        if (nombre === undefined || nombre === null)
            throw new Error("The parameter 'nombre' must be defined.");
        url_ = url_.replace("{Nombre}", encodeURIComponent("" + nombre));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processParametrica(_response);
        });
    }

    protected processParametrica(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporte1(idGestanteControl: number, body: Reporte1 | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/VIH/Reporte1";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporte1(_response);
        });
    }

    protected processReporte1(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporte2(idGestanteControl: number, body: Reporte2 | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/VIH/Reporte2";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporte2(_response);
        });
    }

    protected processReporte2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporte3(idGestanteControl: number, body: Reporte3 | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/VIH/Reporte3";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporte3(_response);
        });
    }

    protected processReporte3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporte4(idGestanteControl: number, body: Reporte4 | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/VIH/Reporte4";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporte4(_response);
        });
    }

    protected processReporte4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporte5(idGestanteControl: number, body: Reporte5 | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/VIH/Reporte5";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporte5(_response);
        });
    }

    protected processReporte5(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporteBinomio(idGestante: number, body: ReporteBinomio | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{idGestante}/VIH/ReporteBinomio";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporteBinomio(_response);
        });
    }

    protected processReporteBinomio(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    reporteEAPB(idGestante: number, body: ReporteEAPB | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Gestante/{idGestante}/ReporteEAPB";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReporteEAPB(_response);
        });
    }

    protected processReporteEAPB(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    retratamientoMaternoGestacional(idTratamientoMaternoEstadioClinico: number, body: RetratamientoMaternoGestacional | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/TratamientoMaternoEstadioClinico/{idTratamientoMaternoEstadioClinico}/Sifilis/RetratamientoMaternoGestacional";
        if (idTratamientoMaternoEstadioClinico === undefined || idTratamientoMaternoEstadioClinico === null)
            throw new Error("The parameter 'idTratamientoMaternoEstadioClinico' must be defined.");
        url_ = url_.replace("{idTratamientoMaternoEstadioClinico}", encodeURIComponent("" + idTratamientoMaternoEstadioClinico));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetratamientoMaternoGestacional(_response);
        });
    }

    protected processRetratamientoMaternoGestacional(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    seguimientoContactoSexual(idGestanteControl: number, body: SeguimientoContactoSexual | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestanteControl}/Sifilis/SeguimientoContactoSexual";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeguimientoContactoSexual(_response);
        });
    }

    protected processSeguimientoContactoSexual(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    seguimientoNinoExpuesto(idGestante: number, body: SeguimientoNinoExpuestoHB | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestante}/HepatitisB/SeguimientoNinoExpuesto";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeguimientoNinoExpuesto(_response);
        });
    }

    protected processSeguimientoNinoExpuesto(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    seguimientoNinoExpuestoChagas(idDiagnostico: number, body: SeguimientoNinoExpuestoChagas | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Diagnostico/{idDiagnostico}/Chagas/SeguimientoNinoExpuestoChagas";
        if (idDiagnostico === undefined || idDiagnostico === null)
            throw new Error("The parameter 'idDiagnostico' must be defined.");
        url_ = url_.replace("{idDiagnostico}", encodeURIComponent("" + idDiagnostico));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeguimientoNinoExpuestoChagas(_response);
        });
    }

    protected processSeguimientoNinoExpuestoChagas(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    seguimientoNinoPrimerAnio(idDiagnosticoIntervencionNino: number, body: SeguimientoNinoPrimerAnio | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/DiagnosticoIntervencionNino/{idDiagnosticoIntervencionNino}/Sifilis/SeguimientoNinoPrimerAnio";
        if (idDiagnosticoIntervencionNino === undefined || idDiagnosticoIntervencionNino === null)
            throw new Error("The parameter 'idDiagnosticoIntervencionNino' must be defined.");
        url_ = url_.replace("{idDiagnosticoIntervencionNino}", encodeURIComponent("" + idDiagnosticoIntervencionNino));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeguimientoNinoPrimerAnio(_response);
        });
    }

    protected processSeguimientoNinoPrimerAnio(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    seguimientoSerologicoGestante(idTratamientoMaternoEstadioClinico: number, body: SeguimientoSerologicoGestante | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/TratamientoMaternoEstadioClinico/{idTratamientoMaternoEstadioClinico}/Sifilis/SeguimientoSerologicoGestante";
        if (idTratamientoMaternoEstadioClinico === undefined || idTratamientoMaternoEstadioClinico === null)
            throw new Error("The parameter 'idTratamientoMaternoEstadioClinico' must be defined.");
        url_ = url_.replace("{idTratamientoMaternoEstadioClinico}", encodeURIComponent("" + idTratamientoMaternoEstadioClinico));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeguimientoSerologicoGestante(_response);
        });
    }

    protected processSeguimientoSerologicoGestante(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sifilisAll( cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/Sifilis";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSifilisAll(_response);
        });
    }

    protected processSifilisAll(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sifilisPOST(body: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Sifilis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSifilisPOST(_response);
        });
    }

    protected processSifilisPOST(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sifilisGET(id: number, cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Sifilis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSifilisGET(_response);
        });
    }

    protected processSifilisGET(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sifilisPUT(id: number, body: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Sifilis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSifilisPUT(_response);
        });
    }

    protected processSifilisPUT(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    sifilisDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Sifilis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSifilisDELETE(_response);
        });
    }

    protected processSifilisDELETE(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    situacionGestanteEmbarazoActual(idGestante: number, body: SituacionGestanteEmbarazoActual | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestante}/Sifilis/SituacionGestanteEmbarazoActual";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSituacionGestanteEmbarazoActual(_response);
        });
    }

    protected processSituacionGestanteEmbarazoActual(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tratamientoMaterno(idAlgoritmo: number, body: TratamientoMaternoChagas | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Algoritmo/{idAlgoritmo}/Chagas/TratamientoMaterno";
        if (idAlgoritmo === undefined || idAlgoritmo === null)
            throw new Error("The parameter 'idAlgoritmo' must be defined.");
        url_ = url_.replace("{idAlgoritmo}", encodeURIComponent("" + idAlgoritmo));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTratamientoMaterno(_response);
        });
    }

    protected processTratamientoMaterno(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tratamientoMaternoEstadioClinico(idDiagnosticoMaterno: number, body: TratamientoMaternoEstadioClinico | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/DiagnosticoMaterno/{idDiagnosticoMaterno}/Sifilis/TratamientoMaternoEstadioClinico";
        if (idDiagnosticoMaterno === undefined || idDiagnosticoMaterno === null)
            throw new Error("The parameter 'idDiagnosticoMaterno' must be defined.");
        url_ = url_.replace("{idDiagnosticoMaterno}", encodeURIComponent("" + idDiagnosticoMaterno));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTratamientoMaternoEstadioClinico(_response);
        });
    }

    protected processTratamientoMaternoEstadioClinico(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tratamientoSeguimientoGestante(idGestante: number, body: TratamientoSeguimientoGestanteHB | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/{idGestante}/HepatitisB/TratamientoSeguimientoGestante";
        if (idGestante === undefined || idGestante === null)
            throw new Error("The parameter 'idGestante' must be defined.");
        url_ = url_.replace("{idGestante}", encodeURIComponent("" + idGestante));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTratamientoSeguimientoGestante(_response);
        });
    }

    protected processTratamientoSeguimientoGestante(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tratamientoSeguimientoNino(idSeguimiento: number, body: TratamientoSeguimientoNinoChagas | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Seguimiento/{idSeguimiento}/Chagas/TratamientoSeguimientoNino";
        if (idSeguimiento === undefined || idSeguimiento === null)
            throw new Error("The parameter 'idSeguimiento' must be defined.");
        url_ = url_.replace("{idSeguimiento}", encodeURIComponent("" + idSeguimiento));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTratamientoSeguimientoNino(_response);
        });
    }

    protected processTratamientoSeguimientoNino(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    vacunacion(idSeguimiento: number, body: VacunacionHB | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/GestanteControl/Seguimiento/{idSeguimiento}/HepatitisB/Vacunacion";
        if (idSeguimiento === undefined || idSeguimiento === null)
            throw new Error("The parameter 'idSeguimiento' must be defined.");
        url_ = url_.replace("{idSeguimiento}", encodeURIComponent("" + idSeguimiento));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVacunacion(_response);
        });
    }

    protected processVacunacion(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    vIH(idGestanteControl: number, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/VIH/{idGestanteControl}";
        if (idGestanteControl === undefined || idGestanteControl === null)
            throw new Error("The parameter 'idGestanteControl' must be defined.");
        url_ = url_.replace("{idGestanteControl}", encodeURIComponent("" + idGestanteControl));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVIH(_response);
        });
    }

    protected processVIH(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AlgoritmoChagas implements IAlgoritmoChagas {
    idAlgoritmo?: number;
    idDiagnosticoGestante?: number;
    sospechaChagasAgudo?: number;
    idExamenParasitologico?: number;
    resultadoExamenParasitologico?: string | undefined;
    sospechaChagasCronicoOTamizajeControlPrenatal?: number;
    resultadoPruebaTamizajeElisaAntigenosTotales?: number;
    fechaRecoleccionMuestra?: Date;
    fechaEmisionResultado?: Date;
    resultadoPruebaTamizajeElisaAntigenosRecombinantes1?: number;
    fechaRecoleccionMuestraRecombinantes1?: Date;
    fechaEmisionResultadoRecombinantes1?: Date;
    resultadoPruebaTamizajeInmunocromatografia?: number;
    fechaRecoleccionMuestraInmunocromatografia?: Date;
    fechaEmisionInmunocromatografia?: Date;
    resultadoPruebaTamizajeElisaAntigenosRecombinantes2?: number;
    fechaRecoleccionMuestraRecombinantes2?: Date;
    fechaEmisionResultadoRecombinantes2?: Date;
    tipoPruebaUtilizada?: string | undefined;
    resultadoPruebaUtilizada?: string | undefined;
    fechaRecoleccionMuestraNoConcordante?: Date;
    fechaEmisionNoConcordante?: Date;
    resultadoPruebaTamizajeElisaAntigenosRecombinantes3?: number;
    fechaRecoleccionMuestraRecombinantes3?: Date;
    fechaEmisionResultadoRecombinantes3?: Date;
    esConfirmadoGestanteConChagas?: number;
    esDescartadoGestanteConChagas?: number;
    numeroHijosDiferenteAlEmbarazoParaRealizarDiagnosticoChagas?: number;

    constructor(data?: IAlgoritmoChagas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idAlgoritmo = _data["idAlgoritmo"];
            this.idDiagnosticoGestante = _data["idDiagnosticoGestante"];
            this.sospechaChagasAgudo = _data["sospechaChagasAgudo"];
            this.idExamenParasitologico = _data["idExamenParasitologico"];
            this.resultadoExamenParasitologico = _data["resultadoExamenParasitologico"];
            this.sospechaChagasCronicoOTamizajeControlPrenatal = _data["sospechaChagasCronicoOTamizajeControlPrenatal"];
            this.resultadoPruebaTamizajeElisaAntigenosTotales = _data["resultadoPruebaTamizajeElisaAntigenosTotales"];
            this.fechaRecoleccionMuestra = _data["fechaRecoleccionMuestra"] ? new Date(_data["fechaRecoleccionMuestra"].toString()) : <any>undefined;
            this.fechaEmisionResultado = _data["fechaEmisionResultado"] ? new Date(_data["fechaEmisionResultado"].toString()) : <any>undefined;
            this.resultadoPruebaTamizajeElisaAntigenosRecombinantes1 = _data["resultadoPruebaTamizajeElisaAntigenosRecombinantes1"];
            this.fechaRecoleccionMuestraRecombinantes1 = _data["fechaRecoleccionMuestraRecombinantes1"] ? new Date(_data["fechaRecoleccionMuestraRecombinantes1"].toString()) : <any>undefined;
            this.fechaEmisionResultadoRecombinantes1 = _data["fechaEmisionResultadoRecombinantes1"] ? new Date(_data["fechaEmisionResultadoRecombinantes1"].toString()) : <any>undefined;
            this.resultadoPruebaTamizajeInmunocromatografia = _data["resultadoPruebaTamizajeInmunocromatografia"];
            this.fechaRecoleccionMuestraInmunocromatografia = _data["fechaRecoleccionMuestraInmunocromatografia"] ? new Date(_data["fechaRecoleccionMuestraInmunocromatografia"].toString()) : <any>undefined;
            this.fechaEmisionInmunocromatografia = _data["fechaEmisionInmunocromatografia"] ? new Date(_data["fechaEmisionInmunocromatografia"].toString()) : <any>undefined;
            this.resultadoPruebaTamizajeElisaAntigenosRecombinantes2 = _data["resultadoPruebaTamizajeElisaAntigenosRecombinantes2"];
            this.fechaRecoleccionMuestraRecombinantes2 = _data["fechaRecoleccionMuestraRecombinantes2"] ? new Date(_data["fechaRecoleccionMuestraRecombinantes2"].toString()) : <any>undefined;
            this.fechaEmisionResultadoRecombinantes2 = _data["fechaEmisionResultadoRecombinantes2"] ? new Date(_data["fechaEmisionResultadoRecombinantes2"].toString()) : <any>undefined;
            this.tipoPruebaUtilizada = _data["tipoPruebaUtilizada"];
            this.resultadoPruebaUtilizada = _data["resultadoPruebaUtilizada"];
            this.fechaRecoleccionMuestraNoConcordante = _data["fechaRecoleccionMuestraNoConcordante"] ? new Date(_data["fechaRecoleccionMuestraNoConcordante"].toString()) : <any>undefined;
            this.fechaEmisionNoConcordante = _data["fechaEmisionNoConcordante"] ? new Date(_data["fechaEmisionNoConcordante"].toString()) : <any>undefined;
            this.resultadoPruebaTamizajeElisaAntigenosRecombinantes3 = _data["resultadoPruebaTamizajeElisaAntigenosRecombinantes3"];
            this.fechaRecoleccionMuestraRecombinantes3 = _data["fechaRecoleccionMuestraRecombinantes3"] ? new Date(_data["fechaRecoleccionMuestraRecombinantes3"].toString()) : <any>undefined;
            this.fechaEmisionResultadoRecombinantes3 = _data["fechaEmisionResultadoRecombinantes3"] ? new Date(_data["fechaEmisionResultadoRecombinantes3"].toString()) : <any>undefined;
            this.esConfirmadoGestanteConChagas = _data["esConfirmadoGestanteConChagas"];
            this.esDescartadoGestanteConChagas = _data["esDescartadoGestanteConChagas"];
            this.numeroHijosDiferenteAlEmbarazoParaRealizarDiagnosticoChagas = _data["numeroHijosDiferenteAlEmbarazoParaRealizarDiagnosticoChagas"];
        }
    }

    static fromJS(data: any): AlgoritmoChagas {
        data = typeof data === 'object' ? data : {};
        let result = new AlgoritmoChagas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idAlgoritmo"] = this.idAlgoritmo;
        data["idDiagnosticoGestante"] = this.idDiagnosticoGestante;
        data["sospechaChagasAgudo"] = this.sospechaChagasAgudo;
        data["idExamenParasitologico"] = this.idExamenParasitologico;
        data["resultadoExamenParasitologico"] = this.resultadoExamenParasitologico;
        data["sospechaChagasCronicoOTamizajeControlPrenatal"] = this.sospechaChagasCronicoOTamizajeControlPrenatal;
        data["resultadoPruebaTamizajeElisaAntigenosTotales"] = this.resultadoPruebaTamizajeElisaAntigenosTotales;
        data["fechaRecoleccionMuestra"] = this.fechaRecoleccionMuestra ? this.fechaRecoleccionMuestra.toISOString() : <any>undefined;
        data["fechaEmisionResultado"] = this.fechaEmisionResultado ? this.fechaEmisionResultado.toISOString() : <any>undefined;
        data["resultadoPruebaTamizajeElisaAntigenosRecombinantes1"] = this.resultadoPruebaTamizajeElisaAntigenosRecombinantes1;
        data["fechaRecoleccionMuestraRecombinantes1"] = this.fechaRecoleccionMuestraRecombinantes1 ? this.fechaRecoleccionMuestraRecombinantes1.toISOString() : <any>undefined;
        data["fechaEmisionResultadoRecombinantes1"] = this.fechaEmisionResultadoRecombinantes1 ? this.fechaEmisionResultadoRecombinantes1.toISOString() : <any>undefined;
        data["resultadoPruebaTamizajeInmunocromatografia"] = this.resultadoPruebaTamizajeInmunocromatografia;
        data["fechaRecoleccionMuestraInmunocromatografia"] = this.fechaRecoleccionMuestraInmunocromatografia ? this.fechaRecoleccionMuestraInmunocromatografia.toISOString() : <any>undefined;
        data["fechaEmisionInmunocromatografia"] = this.fechaEmisionInmunocromatografia ? this.fechaEmisionInmunocromatografia.toISOString() : <any>undefined;
        data["resultadoPruebaTamizajeElisaAntigenosRecombinantes2"] = this.resultadoPruebaTamizajeElisaAntigenosRecombinantes2;
        data["fechaRecoleccionMuestraRecombinantes2"] = this.fechaRecoleccionMuestraRecombinantes2 ? this.fechaRecoleccionMuestraRecombinantes2.toISOString() : <any>undefined;
        data["fechaEmisionResultadoRecombinantes2"] = this.fechaEmisionResultadoRecombinantes2 ? this.fechaEmisionResultadoRecombinantes2.toISOString() : <any>undefined;
        data["tipoPruebaUtilizada"] = this.tipoPruebaUtilizada;
        data["resultadoPruebaUtilizada"] = this.resultadoPruebaUtilizada;
        data["fechaRecoleccionMuestraNoConcordante"] = this.fechaRecoleccionMuestraNoConcordante ? this.fechaRecoleccionMuestraNoConcordante.toISOString() : <any>undefined;
        data["fechaEmisionNoConcordante"] = this.fechaEmisionNoConcordante ? this.fechaEmisionNoConcordante.toISOString() : <any>undefined;
        data["resultadoPruebaTamizajeElisaAntigenosRecombinantes3"] = this.resultadoPruebaTamizajeElisaAntigenosRecombinantes3;
        data["fechaRecoleccionMuestraRecombinantes3"] = this.fechaRecoleccionMuestraRecombinantes3 ? this.fechaRecoleccionMuestraRecombinantes3.toISOString() : <any>undefined;
        data["fechaEmisionResultadoRecombinantes3"] = this.fechaEmisionResultadoRecombinantes3 ? this.fechaEmisionResultadoRecombinantes3.toISOString() : <any>undefined;
        data["esConfirmadoGestanteConChagas"] = this.esConfirmadoGestanteConChagas;
        data["esDescartadoGestanteConChagas"] = this.esDescartadoGestanteConChagas;
        data["numeroHijosDiferenteAlEmbarazoParaRealizarDiagnosticoChagas"] = this.numeroHijosDiferenteAlEmbarazoParaRealizarDiagnosticoChagas;
        return data;
    }
}

export interface IAlgoritmoChagas {
    idAlgoritmo?: number;
    idDiagnosticoGestante?: number;
    sospechaChagasAgudo?: number;
    idExamenParasitologico?: number;
    resultadoExamenParasitologico?: string | undefined;
    sospechaChagasCronicoOTamizajeControlPrenatal?: number;
    resultadoPruebaTamizajeElisaAntigenosTotales?: number;
    fechaRecoleccionMuestra?: Date;
    fechaEmisionResultado?: Date;
    resultadoPruebaTamizajeElisaAntigenosRecombinantes1?: number;
    fechaRecoleccionMuestraRecombinantes1?: Date;
    fechaEmisionResultadoRecombinantes1?: Date;
    resultadoPruebaTamizajeInmunocromatografia?: number;
    fechaRecoleccionMuestraInmunocromatografia?: Date;
    fechaEmisionInmunocromatografia?: Date;
    resultadoPruebaTamizajeElisaAntigenosRecombinantes2?: number;
    fechaRecoleccionMuestraRecombinantes2?: Date;
    fechaEmisionResultadoRecombinantes2?: Date;
    tipoPruebaUtilizada?: string | undefined;
    resultadoPruebaUtilizada?: string | undefined;
    fechaRecoleccionMuestraNoConcordante?: Date;
    fechaEmisionNoConcordante?: Date;
    resultadoPruebaTamizajeElisaAntigenosRecombinantes3?: number;
    fechaRecoleccionMuestraRecombinantes3?: Date;
    fechaEmisionResultadoRecombinantes3?: Date;
    esConfirmadoGestanteConChagas?: number;
    esDescartadoGestanteConChagas?: number;
    numeroHijosDiferenteAlEmbarazoParaRealizarDiagnosticoChagas?: number;
}

export class AplicacionPenicilinaBenzatinica implements IAplicacionPenicilinaBenzatinica {
    idAplicacionPenicilinaBenzatinica?: number;
    idTratamientoMaternoEstadioClinico?: number | undefined;
    idRetratamientoMaternoGestacional?: number | undefined;
    idSeguimientoContactoSexual?: number | undefined;
    esRetratamiento?: number;
    idDosisPenicilinaBenzatinica?: number;
    fechaAplicacionPenicilinaBenzatinica?: Date;
    edadGestionalAplicacionPenicilinaBenzatinicaSemanas?: number;

    constructor(data?: IAplicacionPenicilinaBenzatinica) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idAplicacionPenicilinaBenzatinica = _data["idAplicacionPenicilinaBenzatinica"];
            this.idTratamientoMaternoEstadioClinico = _data["idTratamientoMaternoEstadioClinico"];
            this.idRetratamientoMaternoGestacional = _data["idRetratamientoMaternoGestacional"];
            this.idSeguimientoContactoSexual = _data["idSeguimientoContactoSexual"];
            this.esRetratamiento = _data["esRetratamiento"];
            this.idDosisPenicilinaBenzatinica = _data["idDosisPenicilinaBenzatinica"];
            this.fechaAplicacionPenicilinaBenzatinica = _data["fechaAplicacionPenicilinaBenzatinica"] ? new Date(_data["fechaAplicacionPenicilinaBenzatinica"].toString()) : <any>undefined;
            this.edadGestionalAplicacionPenicilinaBenzatinicaSemanas = _data["edadGestionalAplicacionPenicilinaBenzatinicaSemanas"];
        }
    }

    static fromJS(data: any): AplicacionPenicilinaBenzatinica {
        data = typeof data === 'object' ? data : {};
        let result = new AplicacionPenicilinaBenzatinica();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idAplicacionPenicilinaBenzatinica"] = this.idAplicacionPenicilinaBenzatinica;
        data["idTratamientoMaternoEstadioClinico"] = this.idTratamientoMaternoEstadioClinico;
        data["idRetratamientoMaternoGestacional"] = this.idRetratamientoMaternoGestacional;
        data["idSeguimientoContactoSexual"] = this.idSeguimientoContactoSexual;
        data["esRetratamiento"] = this.esRetratamiento;
        data["idDosisPenicilinaBenzatinica"] = this.idDosisPenicilinaBenzatinica;
        data["fechaAplicacionPenicilinaBenzatinica"] = this.fechaAplicacionPenicilinaBenzatinica ? this.fechaAplicacionPenicilinaBenzatinica.toISOString() : <any>undefined;
        data["edadGestionalAplicacionPenicilinaBenzatinicaSemanas"] = this.edadGestionalAplicacionPenicilinaBenzatinicaSemanas;
        return data;
    }
}

export interface IAplicacionPenicilinaBenzatinica {
    idAplicacionPenicilinaBenzatinica?: number;
    idTratamientoMaternoEstadioClinico?: number | undefined;
    idRetratamientoMaternoGestacional?: number | undefined;
    idSeguimientoContactoSexual?: number | undefined;
    esRetratamiento?: number;
    idDosisPenicilinaBenzatinica?: number;
    fechaAplicacionPenicilinaBenzatinica?: Date;
    edadGestionalAplicacionPenicilinaBenzatinicaSemanas?: number;
}

export class Auth implements IAuth {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAuth) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Auth {
        data = typeof data === 'object' ? data : {};
        let result = new Auth();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IAuth {
    username?: string | undefined;
    password?: string | undefined;
}

export class ClasificacionNinoExpuestoHB implements IClasificacionNinoExpuestoHB {
    idClasificacionNinoExpuesto?: number;
    idSeguimientoNinoExpuesto?: number;
    resultadoAntiHBsAg?: number;
    fechaResultadoAntiHBsAg?: Date;
    resultadoAntiHBs?: number;
    fechaResultadoAntiHBs?: Date;
    idCondicionFinal?: number;
    idClasificacionFinal?: number;

    constructor(data?: IClasificacionNinoExpuestoHB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idClasificacionNinoExpuesto = _data["idClasificacionNinoExpuesto"];
            this.idSeguimientoNinoExpuesto = _data["idSeguimientoNinoExpuesto"];
            this.resultadoAntiHBsAg = _data["resultadoAntiHBsAg"];
            this.fechaResultadoAntiHBsAg = _data["fechaResultadoAntiHBsAg"] ? new Date(_data["fechaResultadoAntiHBsAg"].toString()) : <any>undefined;
            this.resultadoAntiHBs = _data["resultadoAntiHBs"];
            this.fechaResultadoAntiHBs = _data["fechaResultadoAntiHBs"] ? new Date(_data["fechaResultadoAntiHBs"].toString()) : <any>undefined;
            this.idCondicionFinal = _data["idCondicionFinal"];
            this.idClasificacionFinal = _data["idClasificacionFinal"];
        }
    }

    static fromJS(data: any): ClasificacionNinoExpuestoHB {
        data = typeof data === 'object' ? data : {};
        let result = new ClasificacionNinoExpuestoHB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idClasificacionNinoExpuesto"] = this.idClasificacionNinoExpuesto;
        data["idSeguimientoNinoExpuesto"] = this.idSeguimientoNinoExpuesto;
        data["resultadoAntiHBsAg"] = this.resultadoAntiHBsAg;
        data["fechaResultadoAntiHBsAg"] = this.fechaResultadoAntiHBsAg ? this.fechaResultadoAntiHBsAg.toISOString() : <any>undefined;
        data["resultadoAntiHBs"] = this.resultadoAntiHBs;
        data["fechaResultadoAntiHBs"] = this.fechaResultadoAntiHBs ? this.fechaResultadoAntiHBs.toISOString() : <any>undefined;
        data["idCondicionFinal"] = this.idCondicionFinal;
        data["idClasificacionFinal"] = this.idClasificacionFinal;
        return data;
    }
}

export interface IClasificacionNinoExpuestoHB {
    idClasificacionNinoExpuesto?: number;
    idSeguimientoNinoExpuesto?: number;
    resultadoAntiHBsAg?: number;
    fechaResultadoAntiHBsAg?: Date;
    resultadoAntiHBs?: number;
    fechaResultadoAntiHBs?: Date;
    idCondicionFinal?: number;
    idClasificacionFinal?: number;
}

export class DiagnosticoEIntervencionNino implements IDiagnosticoEIntervencionNino {
    idDiagnosticoEIntervencionNino?: number;
    idGestanteControl?: number;
    esDiagnosticoDescartado?: number;
    seAplicoDosisProfilacticaPenicilinaBenzatinica?: number;
    esConfirmadoSifilisCongenita?: number;
    seAplicoTratamiento?: number;
    recibioTratamientoDePenicilinaCristalina?: number;
    recibioTratamientoDePenicilinaCristalina10Dias?: number;
    idCriterioUtilizado?: number;

    constructor(data?: IDiagnosticoEIntervencionNino) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDiagnosticoEIntervencionNino = _data["idDiagnosticoEIntervencionNino"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.esDiagnosticoDescartado = _data["esDiagnosticoDescartado"];
            this.seAplicoDosisProfilacticaPenicilinaBenzatinica = _data["seAplicoDosisProfilacticaPenicilinaBenzatinica"];
            this.esConfirmadoSifilisCongenita = _data["esConfirmadoSifilisCongenita"];
            this.seAplicoTratamiento = _data["seAplicoTratamiento"];
            this.recibioTratamientoDePenicilinaCristalina = _data["recibioTratamientoDePenicilinaCristalina"];
            this.recibioTratamientoDePenicilinaCristalina10Dias = _data["recibioTratamientoDePenicilinaCristalina10Dias"];
            this.idCriterioUtilizado = _data["idCriterioUtilizado"];
        }
    }

    static fromJS(data: any): DiagnosticoEIntervencionNino {
        data = typeof data === 'object' ? data : {};
        let result = new DiagnosticoEIntervencionNino();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDiagnosticoEIntervencionNino"] = this.idDiagnosticoEIntervencionNino;
        data["idGestanteControl"] = this.idGestanteControl;
        data["esDiagnosticoDescartado"] = this.esDiagnosticoDescartado;
        data["seAplicoDosisProfilacticaPenicilinaBenzatinica"] = this.seAplicoDosisProfilacticaPenicilinaBenzatinica;
        data["esConfirmadoSifilisCongenita"] = this.esConfirmadoSifilisCongenita;
        data["seAplicoTratamiento"] = this.seAplicoTratamiento;
        data["recibioTratamientoDePenicilinaCristalina"] = this.recibioTratamientoDePenicilinaCristalina;
        data["recibioTratamientoDePenicilinaCristalina10Dias"] = this.recibioTratamientoDePenicilinaCristalina10Dias;
        data["idCriterioUtilizado"] = this.idCriterioUtilizado;
        return data;
    }
}

export interface IDiagnosticoEIntervencionNino {
    idDiagnosticoEIntervencionNino?: number;
    idGestanteControl?: number;
    esDiagnosticoDescartado?: number;
    seAplicoDosisProfilacticaPenicilinaBenzatinica?: number;
    esConfirmadoSifilisCongenita?: number;
    seAplicoTratamiento?: number;
    recibioTratamientoDePenicilinaCristalina?: number;
    recibioTratamientoDePenicilinaCristalina10Dias?: number;
    idCriterioUtilizado?: number;
}

export class DiagnosticoEnfermedadGestanteChagas implements IDiagnosticoEnfermedadGestanteChagas {
    idDiagnosticoGestante?: number;
    idGestanteControl?: number;
    idCondicionDiagnosticoChagas?: number;
    edadGestacionalSemanas?: number;
    edadGestacionalPrimerControlPrentalSemanas?: number;
    fechaProbableParto?: Date;

    constructor(data?: IDiagnosticoEnfermedadGestanteChagas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDiagnosticoGestante = _data["idDiagnosticoGestante"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idCondicionDiagnosticoChagas = _data["idCondicionDiagnosticoChagas"];
            this.edadGestacionalSemanas = _data["edadGestacionalSemanas"];
            this.edadGestacionalPrimerControlPrentalSemanas = _data["edadGestacionalPrimerControlPrentalSemanas"];
            this.fechaProbableParto = _data["fechaProbableParto"] ? new Date(_data["fechaProbableParto"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DiagnosticoEnfermedadGestanteChagas {
        data = typeof data === 'object' ? data : {};
        let result = new DiagnosticoEnfermedadGestanteChagas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDiagnosticoGestante"] = this.idDiagnosticoGestante;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idCondicionDiagnosticoChagas"] = this.idCondicionDiagnosticoChagas;
        data["edadGestacionalSemanas"] = this.edadGestacionalSemanas;
        data["edadGestacionalPrimerControlPrentalSemanas"] = this.edadGestacionalPrimerControlPrentalSemanas;
        data["fechaProbableParto"] = this.fechaProbableParto ? this.fechaProbableParto.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDiagnosticoEnfermedadGestanteChagas {
    idDiagnosticoGestante?: number;
    idGestanteControl?: number;
    idCondicionDiagnosticoChagas?: number;
    edadGestacionalSemanas?: number;
    edadGestacionalPrimerControlPrentalSemanas?: number;
    fechaProbableParto?: Date;
}

export class DiagnosticoGestanteHB implements IDiagnosticoGestanteHB {
    idDiagnosticoGestante?: number;
    idGestanteControl?: number;
    idMomentoDiagnostico?: number;
    edadGestacional?: number;
    fechaResultadoReactivo?: Date;
    resultadoAntiHBcIgM?: number;
    fechaResultadoAntiHBcIgM?: Date;
    resultadoAntiHBcTotalOlgG?: number;
    fechaResultadoAntiHBcTotalOlgG?: Date;
    resultadoAntiHBeAg?: number;
    fechaResultadoAntiHBeAg?: Date;
    resultadoAntigenoCargaViral?: number;
    fechaResultadoCargaViral?: Date;

    constructor(data?: IDiagnosticoGestanteHB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDiagnosticoGestante = _data["idDiagnosticoGestante"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idMomentoDiagnostico = _data["idMomentoDiagnostico"];
            this.edadGestacional = _data["edadGestacional"];
            this.fechaResultadoReactivo = _data["fechaResultadoReactivo"] ? new Date(_data["fechaResultadoReactivo"].toString()) : <any>undefined;
            this.resultadoAntiHBcIgM = _data["resultadoAntiHBcIgM"];
            this.fechaResultadoAntiHBcIgM = _data["fechaResultadoAntiHBcIgM"] ? new Date(_data["fechaResultadoAntiHBcIgM"].toString()) : <any>undefined;
            this.resultadoAntiHBcTotalOlgG = _data["resultadoAntiHBcTotalOlgG"];
            this.fechaResultadoAntiHBcTotalOlgG = _data["fechaResultadoAntiHBcTotalOlgG"] ? new Date(_data["fechaResultadoAntiHBcTotalOlgG"].toString()) : <any>undefined;
            this.resultadoAntiHBeAg = _data["resultadoAntiHBeAg"];
            this.fechaResultadoAntiHBeAg = _data["fechaResultadoAntiHBeAg"] ? new Date(_data["fechaResultadoAntiHBeAg"].toString()) : <any>undefined;
            this.resultadoAntigenoCargaViral = _data["resultadoAntigenoCargaViral"];
            this.fechaResultadoCargaViral = _data["fechaResultadoCargaViral"] ? new Date(_data["fechaResultadoCargaViral"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DiagnosticoGestanteHB {
        data = typeof data === 'object' ? data : {};
        let result = new DiagnosticoGestanteHB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDiagnosticoGestante"] = this.idDiagnosticoGestante;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idMomentoDiagnostico"] = this.idMomentoDiagnostico;
        data["edadGestacional"] = this.edadGestacional;
        data["fechaResultadoReactivo"] = this.fechaResultadoReactivo ? this.fechaResultadoReactivo.toISOString() : <any>undefined;
        data["resultadoAntiHBcIgM"] = this.resultadoAntiHBcIgM;
        data["fechaResultadoAntiHBcIgM"] = this.fechaResultadoAntiHBcIgM ? this.fechaResultadoAntiHBcIgM.toISOString() : <any>undefined;
        data["resultadoAntiHBcTotalOlgG"] = this.resultadoAntiHBcTotalOlgG;
        data["fechaResultadoAntiHBcTotalOlgG"] = this.fechaResultadoAntiHBcTotalOlgG ? this.fechaResultadoAntiHBcTotalOlgG.toISOString() : <any>undefined;
        data["resultadoAntiHBeAg"] = this.resultadoAntiHBeAg;
        data["fechaResultadoAntiHBeAg"] = this.fechaResultadoAntiHBeAg ? this.fechaResultadoAntiHBeAg.toISOString() : <any>undefined;
        data["resultadoAntigenoCargaViral"] = this.resultadoAntigenoCargaViral;
        data["fechaResultadoCargaViral"] = this.fechaResultadoCargaViral ? this.fechaResultadoCargaViral.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDiagnosticoGestanteHB {
    idDiagnosticoGestante?: number;
    idGestanteControl?: number;
    idMomentoDiagnostico?: number;
    edadGestacional?: number;
    fechaResultadoReactivo?: Date;
    resultadoAntiHBcIgM?: number;
    fechaResultadoAntiHBcIgM?: Date;
    resultadoAntiHBcTotalOlgG?: number;
    fechaResultadoAntiHBcTotalOlgG?: Date;
    resultadoAntiHBeAg?: number;
    fechaResultadoAntiHBeAg?: Date;
    resultadoAntigenoCargaViral?: number;
    fechaResultadoCargaViral?: Date;
}

export class DiagnosticoMaterno implements IDiagnosticoMaterno {
    idDiagnosticoMaterno?: number;
    idGestanteControl?: number;
    idMomentoDiagnostico?: number;
    edadGestacionalDuranteSemanas?: number;
    seRealizoControlPrenatalDuranteEmbarazo?: number;
    seRealizoPruebaTreponemica?: number;
    idPruebaTreponemica?: number;
    idResultadoPruebaTreponemica?: number;
    fechaResultadoPruebaTreponemica?: Date;
    edadGestacionalALaRealizacionPruebaTreponemicaSemanas?: number;
    seRealizoPruebaNoTreponemica?: number;
    idPruebaNoTreponemica?: number;
    idResultadoPruebaNoTreponemica?: number;
    fechaResultadoPruebaNoTreponemica?: Date;
    reporteDilucionesPruebaNoTreponemicaReactiva?: string | undefined;

    constructor(data?: IDiagnosticoMaterno) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDiagnosticoMaterno = _data["idDiagnosticoMaterno"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idMomentoDiagnostico = _data["idMomentoDiagnostico"];
            this.edadGestacionalDuranteSemanas = _data["edadGestacionalDuranteSemanas"];
            this.seRealizoControlPrenatalDuranteEmbarazo = _data["seRealizoControlPrenatalDuranteEmbarazo"];
            this.seRealizoPruebaTreponemica = _data["seRealizoPruebaTreponemica"];
            this.idPruebaTreponemica = _data["idPruebaTreponemica"];
            this.idResultadoPruebaTreponemica = _data["idResultadoPruebaTreponemica"];
            this.fechaResultadoPruebaTreponemica = _data["fechaResultadoPruebaTreponemica"] ? new Date(_data["fechaResultadoPruebaTreponemica"].toString()) : <any>undefined;
            this.edadGestacionalALaRealizacionPruebaTreponemicaSemanas = _data["edadGestacionalALaRealizacionPruebaTreponemicaSemanas"];
            this.seRealizoPruebaNoTreponemica = _data["seRealizoPruebaNoTreponemica"];
            this.idPruebaNoTreponemica = _data["idPruebaNoTreponemica"];
            this.idResultadoPruebaNoTreponemica = _data["idResultadoPruebaNoTreponemica"];
            this.fechaResultadoPruebaNoTreponemica = _data["fechaResultadoPruebaNoTreponemica"] ? new Date(_data["fechaResultadoPruebaNoTreponemica"].toString()) : <any>undefined;
            this.reporteDilucionesPruebaNoTreponemicaReactiva = _data["reporteDilucionesPruebaNoTreponemicaReactiva"];
        }
    }

    static fromJS(data: any): DiagnosticoMaterno {
        data = typeof data === 'object' ? data : {};
        let result = new DiagnosticoMaterno();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDiagnosticoMaterno"] = this.idDiagnosticoMaterno;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idMomentoDiagnostico"] = this.idMomentoDiagnostico;
        data["edadGestacionalDuranteSemanas"] = this.edadGestacionalDuranteSemanas;
        data["seRealizoControlPrenatalDuranteEmbarazo"] = this.seRealizoControlPrenatalDuranteEmbarazo;
        data["seRealizoPruebaTreponemica"] = this.seRealizoPruebaTreponemica;
        data["idPruebaTreponemica"] = this.idPruebaTreponemica;
        data["idResultadoPruebaTreponemica"] = this.idResultadoPruebaTreponemica;
        data["fechaResultadoPruebaTreponemica"] = this.fechaResultadoPruebaTreponemica ? this.fechaResultadoPruebaTreponemica.toISOString() : <any>undefined;
        data["edadGestacionalALaRealizacionPruebaTreponemicaSemanas"] = this.edadGestacionalALaRealizacionPruebaTreponemicaSemanas;
        data["seRealizoPruebaNoTreponemica"] = this.seRealizoPruebaNoTreponemica;
        data["idPruebaNoTreponemica"] = this.idPruebaNoTreponemica;
        data["idResultadoPruebaNoTreponemica"] = this.idResultadoPruebaNoTreponemica;
        data["fechaResultadoPruebaNoTreponemica"] = this.fechaResultadoPruebaNoTreponemica ? this.fechaResultadoPruebaNoTreponemica.toISOString() : <any>undefined;
        data["reporteDilucionesPruebaNoTreponemicaReactiva"] = this.reporteDilucionesPruebaNoTreponemicaReactiva;
        return data;
    }
}

export interface IDiagnosticoMaterno {
    idDiagnosticoMaterno?: number;
    idGestanteControl?: number;
    idMomentoDiagnostico?: number;
    edadGestacionalDuranteSemanas?: number;
    seRealizoControlPrenatalDuranteEmbarazo?: number;
    seRealizoPruebaTreponemica?: number;
    idPruebaTreponemica?: number;
    idResultadoPruebaTreponemica?: number;
    fechaResultadoPruebaTreponemica?: Date;
    edadGestacionalALaRealizacionPruebaTreponemicaSemanas?: number;
    seRealizoPruebaNoTreponemica?: number;
    idPruebaNoTreponemica?: number;
    idResultadoPruebaNoTreponemica?: number;
    fechaResultadoPruebaNoTreponemica?: Date;
    reporteDilucionesPruebaNoTreponemicaReactiva?: string | undefined;
}

export class DiagnosticoNinoExpuestoChagas implements IDiagnosticoNinoExpuestoChagas {
    idDiagnosticoNinoExpuesto?: number;
    idGestanteControl?: number;
    fechaNacimiento?: number;
    idExamenParasitologico?: number;
    resultadoExamenParasitologico?: string | undefined;
    fechaRecoleccionMuestra?: Date;
    fechaEmisiónResultado?: Date;
    seHacePruebaDiagnostica3Meses?: number;
    idExamenParasitologico3Meses?: number;
    resultadoExamenParasitologico3Meses?: string | undefined;
    fechaRecoleccionMuestra3Meses?: Date;
    fechaEmisiónResultado3Meses?: Date;
    seHacePrueebaDiagnosticoMolecular?: number;
    resultadoPCR?: string | undefined;
    fechaRecolecionPCR?: Date;
    fechaEmisionPCR?: Date;
    seHacePruebaDiagnostico10Meses?: number;
    esAntigenosTotales?: number;
    esAntigenosRecombinantes?: number;
    resultadoPrueba?: number;
    fechaRecoleccionMuestra10Meses?: Date;
    fechaEmisionResultado10Meses?: Date;
    esCasoConfirmadoTMIChagas?: number;

    constructor(data?: IDiagnosticoNinoExpuestoChagas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idDiagnosticoNinoExpuesto = _data["idDiagnosticoNinoExpuesto"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.fechaNacimiento = _data["fechaNacimiento"];
            this.idExamenParasitologico = _data["idExamenParasitologico"];
            this.resultadoExamenParasitologico = _data["resultadoExamenParasitologico"];
            this.fechaRecoleccionMuestra = _data["fechaRecoleccionMuestra"] ? new Date(_data["fechaRecoleccionMuestra"].toString()) : <any>undefined;
            this.fechaEmisiónResultado = _data["fechaEmisiónResultado"] ? new Date(_data["fechaEmisiónResultado"].toString()) : <any>undefined;
            this.seHacePruebaDiagnostica3Meses = _data["seHacePruebaDiagnostica3Meses"];
            this.idExamenParasitologico3Meses = _data["idExamenParasitologico3Meses"];
            this.resultadoExamenParasitologico3Meses = _data["resultadoExamenParasitologico3Meses"];
            this.fechaRecoleccionMuestra3Meses = _data["fechaRecoleccionMuestra3Meses"] ? new Date(_data["fechaRecoleccionMuestra3Meses"].toString()) : <any>undefined;
            this.fechaEmisiónResultado3Meses = _data["fechaEmisiónResultado3Meses"] ? new Date(_data["fechaEmisiónResultado3Meses"].toString()) : <any>undefined;
            this.seHacePrueebaDiagnosticoMolecular = _data["seHacePrueebaDiagnosticoMolecular"];
            this.resultadoPCR = _data["resultadoPCR"];
            this.fechaRecolecionPCR = _data["fechaRecolecionPCR"] ? new Date(_data["fechaRecolecionPCR"].toString()) : <any>undefined;
            this.fechaEmisionPCR = _data["fechaEmisionPCR"] ? new Date(_data["fechaEmisionPCR"].toString()) : <any>undefined;
            this.seHacePruebaDiagnostico10Meses = _data["seHacePruebaDiagnostico10Meses"];
            this.esAntigenosTotales = _data["esAntigenosTotales"];
            this.esAntigenosRecombinantes = _data["esAntigenosRecombinantes"];
            this.resultadoPrueba = _data["resultadoPrueba"];
            this.fechaRecoleccionMuestra10Meses = _data["fechaRecoleccionMuestra10Meses"] ? new Date(_data["fechaRecoleccionMuestra10Meses"].toString()) : <any>undefined;
            this.fechaEmisionResultado10Meses = _data["fechaEmisionResultado10Meses"] ? new Date(_data["fechaEmisionResultado10Meses"].toString()) : <any>undefined;
            this.esCasoConfirmadoTMIChagas = _data["esCasoConfirmadoTMIChagas"];
        }
    }

    static fromJS(data: any): DiagnosticoNinoExpuestoChagas {
        data = typeof data === 'object' ? data : {};
        let result = new DiagnosticoNinoExpuestoChagas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idDiagnosticoNinoExpuesto"] = this.idDiagnosticoNinoExpuesto;
        data["idGestanteControl"] = this.idGestanteControl;
        data["fechaNacimiento"] = this.fechaNacimiento;
        data["idExamenParasitologico"] = this.idExamenParasitologico;
        data["resultadoExamenParasitologico"] = this.resultadoExamenParasitologico;
        data["fechaRecoleccionMuestra"] = this.fechaRecoleccionMuestra ? this.fechaRecoleccionMuestra.toISOString() : <any>undefined;
        data["fechaEmisiónResultado"] = this.fechaEmisiónResultado ? this.fechaEmisiónResultado.toISOString() : <any>undefined;
        data["seHacePruebaDiagnostica3Meses"] = this.seHacePruebaDiagnostica3Meses;
        data["idExamenParasitologico3Meses"] = this.idExamenParasitologico3Meses;
        data["resultadoExamenParasitologico3Meses"] = this.resultadoExamenParasitologico3Meses;
        data["fechaRecoleccionMuestra3Meses"] = this.fechaRecoleccionMuestra3Meses ? this.fechaRecoleccionMuestra3Meses.toISOString() : <any>undefined;
        data["fechaEmisiónResultado3Meses"] = this.fechaEmisiónResultado3Meses ? this.fechaEmisiónResultado3Meses.toISOString() : <any>undefined;
        data["seHacePrueebaDiagnosticoMolecular"] = this.seHacePrueebaDiagnosticoMolecular;
        data["resultadoPCR"] = this.resultadoPCR;
        data["fechaRecolecionPCR"] = this.fechaRecolecionPCR ? this.fechaRecolecionPCR.toISOString() : <any>undefined;
        data["fechaEmisionPCR"] = this.fechaEmisionPCR ? this.fechaEmisionPCR.toISOString() : <any>undefined;
        data["seHacePruebaDiagnostico10Meses"] = this.seHacePruebaDiagnostico10Meses;
        data["esAntigenosTotales"] = this.esAntigenosTotales;
        data["esAntigenosRecombinantes"] = this.esAntigenosRecombinantes;
        data["resultadoPrueba"] = this.resultadoPrueba;
        data["fechaRecoleccionMuestra10Meses"] = this.fechaRecoleccionMuestra10Meses ? this.fechaRecoleccionMuestra10Meses.toISOString() : <any>undefined;
        data["fechaEmisionResultado10Meses"] = this.fechaEmisionResultado10Meses ? this.fechaEmisionResultado10Meses.toISOString() : <any>undefined;
        data["esCasoConfirmadoTMIChagas"] = this.esCasoConfirmadoTMIChagas;
        return data;
    }
}

export interface IDiagnosticoNinoExpuestoChagas {
    idDiagnosticoNinoExpuesto?: number;
    idGestanteControl?: number;
    fechaNacimiento?: number;
    idExamenParasitologico?: number;
    resultadoExamenParasitologico?: string | undefined;
    fechaRecoleccionMuestra?: Date;
    fechaEmisiónResultado?: Date;
    seHacePruebaDiagnostica3Meses?: number;
    idExamenParasitologico3Meses?: number;
    resultadoExamenParasitologico3Meses?: string | undefined;
    fechaRecoleccionMuestra3Meses?: Date;
    fechaEmisiónResultado3Meses?: Date;
    seHacePrueebaDiagnosticoMolecular?: number;
    resultadoPCR?: string | undefined;
    fechaRecolecionPCR?: Date;
    fechaEmisionPCR?: Date;
    seHacePruebaDiagnostico10Meses?: number;
    esAntigenosTotales?: number;
    esAntigenosRecombinantes?: number;
    resultadoPrueba?: number;
    fechaRecoleccionMuestra10Meses?: Date;
    fechaEmisionResultado10Meses?: Date;
    esCasoConfirmadoTMIChagas?: number;
}

export class Gestante implements IGestante {
    idGestante?: number;
    nombresApellidos?: string | undefined;
    idNacionalidad?: number;
    idTipoDocumento?: number;
    numeroDocumento?: string | undefined;
    edad?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    idPertenenciaEtnica?: number;
    idGrupoPoblacional?: number;
    idAreaOcurrencia?: number;
    idDptoResidencia?: number;
    idMunicipioResidencia?: number;
    direccionResidencia?: string | undefined;
    idDptoAtencion?: number;
    idMunicipioAtencion?: number;
    telefono?: string | undefined;
    fechaPosibleParto?: Date;
    seRealizaControlPrenatal?: number;
    edadGestacionalSemanas?: number;

    constructor(data?: IGestante) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idGestante = _data["idGestante"];
            this.nombresApellidos = _data["nombresApellidos"];
            this.idNacionalidad = _data["idNacionalidad"];
            this.idTipoDocumento = _data["idTipoDocumento"];
            this.numeroDocumento = _data["numeroDocumento"];
            this.edad = _data["edad"];
            this.idTipoRegimenSalud = _data["idTipoRegimenSalud"];
            this.nombreAseguradora = _data["nombreAseguradora"];
            this.idPertenenciaEtnica = _data["idPertenenciaEtnica"];
            this.idGrupoPoblacional = _data["idGrupoPoblacional"];
            this.idAreaOcurrencia = _data["idAreaOcurrencia"];
            this.idDptoResidencia = _data["idDptoResidencia"];
            this.idMunicipioResidencia = _data["idMunicipioResidencia"];
            this.direccionResidencia = _data["direccionResidencia"];
            this.idDptoAtencion = _data["idDptoAtencion"];
            this.idMunicipioAtencion = _data["idMunicipioAtencion"];
            this.telefono = _data["telefono"];
            this.fechaPosibleParto = _data["fechaPosibleParto"] ? new Date(_data["fechaPosibleParto"].toString()) : <any>undefined;
            this.seRealizaControlPrenatal = _data["seRealizaControlPrenatal"];
            this.edadGestacionalSemanas = _data["edadGestacionalSemanas"];
        }
    }

    static fromJS(data: any): Gestante {
        data = typeof data === 'object' ? data : {};
        let result = new Gestante();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idGestante"] = this.idGestante;
        data["nombresApellidos"] = this.nombresApellidos;
        data["idNacionalidad"] = this.idNacionalidad;
        data["idTipoDocumento"] = this.idTipoDocumento;
        data["numeroDocumento"] = this.numeroDocumento;
        data["edad"] = this.edad;
        data["idTipoRegimenSalud"] = this.idTipoRegimenSalud;
        data["nombreAseguradora"] = this.nombreAseguradora;
        data["idPertenenciaEtnica"] = this.idPertenenciaEtnica;
        data["idGrupoPoblacional"] = this.idGrupoPoblacional;
        data["idAreaOcurrencia"] = this.idAreaOcurrencia;
        data["idDptoResidencia"] = this.idDptoResidencia;
        data["idMunicipioResidencia"] = this.idMunicipioResidencia;
        data["direccionResidencia"] = this.direccionResidencia;
        data["idDptoAtencion"] = this.idDptoAtencion;
        data["idMunicipioAtencion"] = this.idMunicipioAtencion;
        data["telefono"] = this.telefono;
        data["fechaPosibleParto"] = this.fechaPosibleParto ? this.fechaPosibleParto.toISOString() : <any>undefined;
        data["seRealizaControlPrenatal"] = this.seRealizaControlPrenatal;
        data["edadGestacionalSemanas"] = this.edadGestacionalSemanas;
        return data;
    }
}

export interface IGestante {
    idGestante?: number;
    nombresApellidos?: string | undefined;
    idNacionalidad?: number;
    idTipoDocumento?: number;
    numeroDocumento?: string | undefined;
    edad?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    idPertenenciaEtnica?: number;
    idGrupoPoblacional?: number;
    idAreaOcurrencia?: number;
    idDptoResidencia?: number;
    idMunicipioResidencia?: number;
    direccionResidencia?: string | undefined;
    idDptoAtencion?: number;
    idMunicipioAtencion?: number;
    telefono?: string | undefined;
    fechaPosibleParto?: Date;
    seRealizaControlPrenatal?: number;
    edadGestacionalSemanas?: number;
}

export class GestanteControl implements IGestanteControl {
    idGestanteControl?: number;
    idGestante?: number;
    fechaControl?: Date;

    constructor(data?: IGestanteControl) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idGestanteControl = _data["idGestanteControl"];
            this.idGestante = _data["idGestante"];
            this.fechaControl = _data["fechaControl"] ? new Date(_data["fechaControl"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GestanteControl {
        data = typeof data === 'object' ? data : {};
        let result = new GestanteControl();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idGestanteControl"] = this.idGestanteControl;
        data["idGestante"] = this.idGestante;
        data["fechaControl"] = this.fechaControl ? this.fechaControl.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGestanteControl {
    idGestanteControl?: number;
    idGestante?: number;
    fechaControl?: Date;
}

export class ParaclinicoMadre implements IParaclinicoMadre {
    idParaclinico?: number;
    idReporte?: number;
    idMomentoDiagnostico?: number;
    idParaclinicoRealizado?: number;
    fechaParaclinico?: Date;
    resultadoParaclinico?: number;

    constructor(data?: IParaclinicoMadre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idParaclinico = _data["idParaclinico"];
            this.idReporte = _data["idReporte"];
            this.idMomentoDiagnostico = _data["idMomentoDiagnostico"];
            this.idParaclinicoRealizado = _data["idParaclinicoRealizado"];
            this.fechaParaclinico = _data["fechaParaclinico"] ? new Date(_data["fechaParaclinico"].toString()) : <any>undefined;
            this.resultadoParaclinico = _data["resultadoParaclinico"];
        }
    }

    static fromJS(data: any): ParaclinicoMadre {
        data = typeof data === 'object' ? data : {};
        let result = new ParaclinicoMadre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idParaclinico"] = this.idParaclinico;
        data["idReporte"] = this.idReporte;
        data["idMomentoDiagnostico"] = this.idMomentoDiagnostico;
        data["idParaclinicoRealizado"] = this.idParaclinicoRealizado;
        data["fechaParaclinico"] = this.fechaParaclinico ? this.fechaParaclinico.toISOString() : <any>undefined;
        data["resultadoParaclinico"] = this.resultadoParaclinico;
        return data;
    }
}

export interface IParaclinicoMadre {
    idParaclinico?: number;
    idReporte?: number;
    idMomentoDiagnostico?: number;
    idParaclinicoRealizado?: number;
    fechaParaclinico?: Date;
    resultadoParaclinico?: number;
}

export class ParaclinicoNino implements IParaclinicoNino {
    idParaclinico?: number;
    idReporte?: number;
    idParaclinicoRealizado?: number;
    fechaParaclinico?: Date;
    resultadoParaclinico?: number;

    constructor(data?: IParaclinicoNino) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idParaclinico = _data["idParaclinico"];
            this.idReporte = _data["idReporte"];
            this.idParaclinicoRealizado = _data["idParaclinicoRealizado"];
            this.fechaParaclinico = _data["fechaParaclinico"] ? new Date(_data["fechaParaclinico"].toString()) : <any>undefined;
            this.resultadoParaclinico = _data["resultadoParaclinico"];
        }
    }

    static fromJS(data: any): ParaclinicoNino {
        data = typeof data === 'object' ? data : {};
        let result = new ParaclinicoNino();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idParaclinico"] = this.idParaclinico;
        data["idReporte"] = this.idReporte;
        data["idParaclinicoRealizado"] = this.idParaclinicoRealizado;
        data["fechaParaclinico"] = this.fechaParaclinico ? this.fechaParaclinico.toISOString() : <any>undefined;
        data["resultadoParaclinico"] = this.resultadoParaclinico;
        return data;
    }
}

export interface IParaclinicoNino {
    idParaclinico?: number;
    idReporte?: number;
    idParaclinicoRealizado?: number;
    fechaParaclinico?: Date;
    resultadoParaclinico?: number;
}

export class Reporte1 implements IReporte1 {
    idReporte?: number;
    idGestanteControl?: number;
    idMomentoDiagnostico?: number;
    idPruebaConfirmarVih?: number;
    fechaDiagnostico?: Date;
    idResultados?: number;
    numeroCopias?: number;
    estabaRecibiendoTARAntesEmbarazo?: number;
    recibioTARDuranteEmbarazo?: number;
    edadGestacionalInicioTARSemanas?: number;
    estabaRecibiendoTARDuranteEmbarazoActual?: number;
    edadGestacionalCuandoRecibioTAR?: number;
    edadGestacionalAlDianosticoVIHSemanas?: number;
    medicamentosARVSuministrados?: string | undefined;
    seRealizoControlPrenatalDuranteEmbarazo?: number;
    edadGestacionalPrimerControlPrenatalSemanas?: number;
    fechaProbableParto?: Date;

    constructor(data?: IReporte1) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReporte = _data["idReporte"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idMomentoDiagnostico = _data["idMomentoDiagnostico"];
            this.idPruebaConfirmarVih = _data["idPruebaConfirmarVih"];
            this.fechaDiagnostico = _data["fechaDiagnostico"] ? new Date(_data["fechaDiagnostico"].toString()) : <any>undefined;
            this.idResultados = _data["idResultados"];
            this.numeroCopias = _data["numeroCopias"];
            this.estabaRecibiendoTARAntesEmbarazo = _data["estabaRecibiendoTARAntesEmbarazo"];
            this.recibioTARDuranteEmbarazo = _data["recibioTARDuranteEmbarazo"];
            this.edadGestacionalInicioTARSemanas = _data["edadGestacionalInicioTARSemanas"];
            this.estabaRecibiendoTARDuranteEmbarazoActual = _data["estabaRecibiendoTARDuranteEmbarazoActual"];
            this.edadGestacionalCuandoRecibioTAR = _data["edadGestacionalCuandoRecibioTAR"];
            this.edadGestacionalAlDianosticoVIHSemanas = _data["edadGestacionalAlDianosticoVIHSemanas"];
            this.medicamentosARVSuministrados = _data["medicamentosARVSuministrados"];
            this.seRealizoControlPrenatalDuranteEmbarazo = _data["seRealizoControlPrenatalDuranteEmbarazo"];
            this.edadGestacionalPrimerControlPrenatalSemanas = _data["edadGestacionalPrimerControlPrenatalSemanas"];
            this.fechaProbableParto = _data["fechaProbableParto"] ? new Date(_data["fechaProbableParto"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Reporte1 {
        data = typeof data === 'object' ? data : {};
        let result = new Reporte1();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReporte"] = this.idReporte;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idMomentoDiagnostico"] = this.idMomentoDiagnostico;
        data["idPruebaConfirmarVih"] = this.idPruebaConfirmarVih;
        data["fechaDiagnostico"] = this.fechaDiagnostico ? this.fechaDiagnostico.toISOString() : <any>undefined;
        data["idResultados"] = this.idResultados;
        data["numeroCopias"] = this.numeroCopias;
        data["estabaRecibiendoTARAntesEmbarazo"] = this.estabaRecibiendoTARAntesEmbarazo;
        data["recibioTARDuranteEmbarazo"] = this.recibioTARDuranteEmbarazo;
        data["edadGestacionalInicioTARSemanas"] = this.edadGestacionalInicioTARSemanas;
        data["estabaRecibiendoTARDuranteEmbarazoActual"] = this.estabaRecibiendoTARDuranteEmbarazoActual;
        data["edadGestacionalCuandoRecibioTAR"] = this.edadGestacionalCuandoRecibioTAR;
        data["edadGestacionalAlDianosticoVIHSemanas"] = this.edadGestacionalAlDianosticoVIHSemanas;
        data["medicamentosARVSuministrados"] = this.medicamentosARVSuministrados;
        data["seRealizoControlPrenatalDuranteEmbarazo"] = this.seRealizoControlPrenatalDuranteEmbarazo;
        data["edadGestacionalPrimerControlPrenatalSemanas"] = this.edadGestacionalPrimerControlPrenatalSemanas;
        data["fechaProbableParto"] = this.fechaProbableParto ? this.fechaProbableParto.toISOString() : <any>undefined;
        return data;
    }
}

export interface IReporte1 {
    idReporte?: number;
    idGestanteControl?: number;
    idMomentoDiagnostico?: number;
    idPruebaConfirmarVih?: number;
    fechaDiagnostico?: Date;
    idResultados?: number;
    numeroCopias?: number;
    estabaRecibiendoTARAntesEmbarazo?: number;
    recibioTARDuranteEmbarazo?: number;
    edadGestacionalInicioTARSemanas?: number;
    estabaRecibiendoTARDuranteEmbarazoActual?: number;
    edadGestacionalCuandoRecibioTAR?: number;
    edadGestacionalAlDianosticoVIHSemanas?: number;
    medicamentosARVSuministrados?: string | undefined;
    seRealizoControlPrenatalDuranteEmbarazo?: number;
    edadGestacionalPrimerControlPrenatalSemanas?: number;
    fechaProbableParto?: Date;
}

export class Reporte2 implements IReporte2 {
    idReporte?: number;
    idGestanteControl?: number;
    tieneCargaViral?: number;
    fechaResultado?: Date;
    resultadoCargaViral?: number;

    constructor(data?: IReporte2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReporte = _data["idReporte"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.tieneCargaViral = _data["tieneCargaViral"];
            this.fechaResultado = _data["fechaResultado"] ? new Date(_data["fechaResultado"].toString()) : <any>undefined;
            this.resultadoCargaViral = _data["resultadoCargaViral"];
        }
    }

    static fromJS(data: any): Reporte2 {
        data = typeof data === 'object' ? data : {};
        let result = new Reporte2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReporte"] = this.idReporte;
        data["idGestanteControl"] = this.idGestanteControl;
        data["tieneCargaViral"] = this.tieneCargaViral;
        data["fechaResultado"] = this.fechaResultado ? this.fechaResultado.toISOString() : <any>undefined;
        data["resultadoCargaViral"] = this.resultadoCargaViral;
        return data;
    }
}

export interface IReporte2 {
    idReporte?: number;
    idGestanteControl?: number;
    tieneCargaViral?: number;
    fechaResultado?: Date;
    resultadoCargaViral?: number;
}

export class Reporte3 implements IReporte3 {
    idReporte?: number;
    idGestanteControl?: number;
    idSituacionGestante?: number;
    fechaDelParto?: Date;
    idEsquemaAntirretroviralIntraparto?: number;
    idEsquemaArvIntraparto?: number;
    idCondicionRecienNacido?: number;
    idNumeroDeProductosNacimiento?: number;
    edadGestacionalNacimientoSemanas?: number;
    pesoRecienNacidoGramos?: number;
    idSexo?: number;
    idTipoParto?: number;
    seRealizoSuprecionLactancia?: number;
    medicamentoSuministrado?: string | undefined;

    constructor(data?: IReporte3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReporte = _data["idReporte"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idSituacionGestante = _data["idSituacionGestante"];
            this.fechaDelParto = _data["fechaDelParto"] ? new Date(_data["fechaDelParto"].toString()) : <any>undefined;
            this.idEsquemaAntirretroviralIntraparto = _data["idEsquemaAntirretroviralIntraparto"];
            this.idEsquemaArvIntraparto = _data["idEsquemaArvIntraparto"];
            this.idCondicionRecienNacido = _data["idCondicionRecienNacido"];
            this.idNumeroDeProductosNacimiento = _data["idNumeroDeProductosNacimiento"];
            this.edadGestacionalNacimientoSemanas = _data["edadGestacionalNacimientoSemanas"];
            this.pesoRecienNacidoGramos = _data["pesoRecienNacidoGramos"];
            this.idSexo = _data["idSexo"];
            this.idTipoParto = _data["idTipoParto"];
            this.seRealizoSuprecionLactancia = _data["seRealizoSuprecionLactancia"];
            this.medicamentoSuministrado = _data["medicamentoSuministrado"];
        }
    }

    static fromJS(data: any): Reporte3 {
        data = typeof data === 'object' ? data : {};
        let result = new Reporte3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReporte"] = this.idReporte;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idSituacionGestante"] = this.idSituacionGestante;
        data["fechaDelParto"] = this.fechaDelParto ? this.fechaDelParto.toISOString() : <any>undefined;
        data["idEsquemaAntirretroviralIntraparto"] = this.idEsquemaAntirretroviralIntraparto;
        data["idEsquemaArvIntraparto"] = this.idEsquemaArvIntraparto;
        data["idCondicionRecienNacido"] = this.idCondicionRecienNacido;
        data["idNumeroDeProductosNacimiento"] = this.idNumeroDeProductosNacimiento;
        data["edadGestacionalNacimientoSemanas"] = this.edadGestacionalNacimientoSemanas;
        data["pesoRecienNacidoGramos"] = this.pesoRecienNacidoGramos;
        data["idSexo"] = this.idSexo;
        data["idTipoParto"] = this.idTipoParto;
        data["seRealizoSuprecionLactancia"] = this.seRealizoSuprecionLactancia;
        data["medicamentoSuministrado"] = this.medicamentoSuministrado;
        return data;
    }
}

export interface IReporte3 {
    idReporte?: number;
    idGestanteControl?: number;
    idSituacionGestante?: number;
    fechaDelParto?: Date;
    idEsquemaAntirretroviralIntraparto?: number;
    idEsquemaArvIntraparto?: number;
    idCondicionRecienNacido?: number;
    idNumeroDeProductosNacimiento?: number;
    edadGestacionalNacimientoSemanas?: number;
    pesoRecienNacidoGramos?: number;
    idSexo?: number;
    idTipoParto?: number;
    seRealizoSuprecionLactancia?: number;
    medicamentoSuministrado?: string | undefined;
}

export class Reporte4 implements IReporte4 {
    idReporte?: number;
    idGestanteControl?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;
    idClasificacionTMINinoExpuesto?: number;
    recibioNinoProfilaxisAntiretroviral?: number;
    medicamentosAntirretroviralNinoExpuesto?: string | undefined;
    seRealizoADNProviral?: number;
    fechaResultadoADNProviral?: Date;
    resultadoADNProviral?: string | undefined;
    seRealizaronCargasVirales?: number;
    fechaResultadoCargasVirales?: Date;
    resultadoCargasVirales?: number;
    otrasPruebasNinoExpuesto?: string | undefined;

    constructor(data?: IReporte4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReporte = _data["idReporte"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idTipoRegimenSalud = _data["idTipoRegimenSalud"];
            this.nombreAseguradora = _data["nombreAseguradora"];
            this.nombresApellidos = _data["nombresApellidos"];
            this.idTipoDocumento = _data["idTipoDocumento"];
            this.numeroIdentificacion = _data["numeroIdentificacion"];
            this.idClasificacionTMINinoExpuesto = _data["idClasificacionTMINinoExpuesto"];
            this.recibioNinoProfilaxisAntiretroviral = _data["recibioNinoProfilaxisAntiretroviral"];
            this.medicamentosAntirretroviralNinoExpuesto = _data["medicamentosAntirretroviralNinoExpuesto"];
            this.seRealizoADNProviral = _data["seRealizoADNProviral"];
            this.fechaResultadoADNProviral = _data["fechaResultadoADNProviral"] ? new Date(_data["fechaResultadoADNProviral"].toString()) : <any>undefined;
            this.resultadoADNProviral = _data["resultadoADNProviral"];
            this.seRealizaronCargasVirales = _data["seRealizaronCargasVirales"];
            this.fechaResultadoCargasVirales = _data["fechaResultadoCargasVirales"] ? new Date(_data["fechaResultadoCargasVirales"].toString()) : <any>undefined;
            this.resultadoCargasVirales = _data["resultadoCargasVirales"];
            this.otrasPruebasNinoExpuesto = _data["otrasPruebasNinoExpuesto"];
        }
    }

    static fromJS(data: any): Reporte4 {
        data = typeof data === 'object' ? data : {};
        let result = new Reporte4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReporte"] = this.idReporte;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idTipoRegimenSalud"] = this.idTipoRegimenSalud;
        data["nombreAseguradora"] = this.nombreAseguradora;
        data["nombresApellidos"] = this.nombresApellidos;
        data["idTipoDocumento"] = this.idTipoDocumento;
        data["numeroIdentificacion"] = this.numeroIdentificacion;
        data["idClasificacionTMINinoExpuesto"] = this.idClasificacionTMINinoExpuesto;
        data["recibioNinoProfilaxisAntiretroviral"] = this.recibioNinoProfilaxisAntiretroviral;
        data["medicamentosAntirretroviralNinoExpuesto"] = this.medicamentosAntirretroviralNinoExpuesto;
        data["seRealizoADNProviral"] = this.seRealizoADNProviral;
        data["fechaResultadoADNProviral"] = this.fechaResultadoADNProviral ? this.fechaResultadoADNProviral.toISOString() : <any>undefined;
        data["resultadoADNProviral"] = this.resultadoADNProviral;
        data["seRealizaronCargasVirales"] = this.seRealizaronCargasVirales;
        data["fechaResultadoCargasVirales"] = this.fechaResultadoCargasVirales ? this.fechaResultadoCargasVirales.toISOString() : <any>undefined;
        data["resultadoCargasVirales"] = this.resultadoCargasVirales;
        data["otrasPruebasNinoExpuesto"] = this.otrasPruebasNinoExpuesto;
        return data;
    }
}

export interface IReporte4 {
    idReporte?: number;
    idGestanteControl?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;
    idClasificacionTMINinoExpuesto?: number;
    recibioNinoProfilaxisAntiretroviral?: number;
    medicamentosAntirretroviralNinoExpuesto?: string | undefined;
    seRealizoADNProviral?: number;
    fechaResultadoADNProviral?: Date;
    resultadoADNProviral?: string | undefined;
    seRealizaronCargasVirales?: number;
    fechaResultadoCargasVirales?: Date;
    resultadoCargasVirales?: number;
    otrasPruebasNinoExpuesto?: string | undefined;
}

export class Reporte5 implements IReporte5 {
    idReporte?: number;
    idGestanteControl?: number;
    fechaPruebaRealizadaADNProviral?: Date;
    idTipoPrueba?: number;
    fechaPrueba?: Date;
    resultadoPrueba?: string | undefined;
    idTipoAlimentacionNinoExpuesto?: number;
    idSituacionNinoExpuesto?: number;

    constructor(data?: IReporte5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idReporte = _data["idReporte"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.fechaPruebaRealizadaADNProviral = _data["fechaPruebaRealizadaADNProviral"] ? new Date(_data["fechaPruebaRealizadaADNProviral"].toString()) : <any>undefined;
            this.idTipoPrueba = _data["idTipoPrueba"];
            this.fechaPrueba = _data["fechaPrueba"] ? new Date(_data["fechaPrueba"].toString()) : <any>undefined;
            this.resultadoPrueba = _data["resultadoPrueba"];
            this.idTipoAlimentacionNinoExpuesto = _data["idTipoAlimentacionNinoExpuesto"];
            this.idSituacionNinoExpuesto = _data["idSituacionNinoExpuesto"];
        }
    }

    static fromJS(data: any): Reporte5 {
        data = typeof data === 'object' ? data : {};
        let result = new Reporte5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idReporte"] = this.idReporte;
        data["idGestanteControl"] = this.idGestanteControl;
        data["fechaPruebaRealizadaADNProviral"] = this.fechaPruebaRealizadaADNProviral ? this.fechaPruebaRealizadaADNProviral.toISOString() : <any>undefined;
        data["idTipoPrueba"] = this.idTipoPrueba;
        data["fechaPrueba"] = this.fechaPrueba ? this.fechaPrueba.toISOString() : <any>undefined;
        data["resultadoPrueba"] = this.resultadoPrueba;
        data["idTipoAlimentacionNinoExpuesto"] = this.idTipoAlimentacionNinoExpuesto;
        data["idSituacionNinoExpuesto"] = this.idSituacionNinoExpuesto;
        return data;
    }
}

export interface IReporte5 {
    idReporte?: number;
    idGestanteControl?: number;
    fechaPruebaRealizadaADNProviral?: Date;
    idTipoPrueba?: number;
    fechaPrueba?: Date;
    resultadoPrueba?: string | undefined;
    idTipoAlimentacionNinoExpuesto?: number;
    idSituacionNinoExpuesto?: number;
}

export class ReporteBinomio implements IReporteBinomio {
    idGestante?: number;
    idBinomio?: number;
    nombreIPSAtencionVIH?: string | undefined;
    nombreRemitenteInformacion?: string | undefined;
    cargoRemitenteInformacion?: string | undefined;
    telefonoRemitenteInformacion?: string | undefined;
    correoRemitenteInformacion1?: string | undefined;
    correoRemitenteInformacion2?: string | undefined;

    constructor(data?: IReporteBinomio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idGestante = _data["idGestante"];
            this.idBinomio = _data["idBinomio"];
            this.nombreIPSAtencionVIH = _data["nombreIPSAtencionVIH"];
            this.nombreRemitenteInformacion = _data["nombreRemitenteInformacion"];
            this.cargoRemitenteInformacion = _data["cargoRemitenteInformacion"];
            this.telefonoRemitenteInformacion = _data["telefonoRemitenteInformacion"];
            this.correoRemitenteInformacion1 = _data["correoRemitenteInformacion1"];
            this.correoRemitenteInformacion2 = _data["correoRemitenteInformacion2"];
        }
    }

    static fromJS(data: any): ReporteBinomio {
        data = typeof data === 'object' ? data : {};
        let result = new ReporteBinomio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idGestante"] = this.idGestante;
        data["idBinomio"] = this.idBinomio;
        data["nombreIPSAtencionVIH"] = this.nombreIPSAtencionVIH;
        data["nombreRemitenteInformacion"] = this.nombreRemitenteInformacion;
        data["cargoRemitenteInformacion"] = this.cargoRemitenteInformacion;
        data["telefonoRemitenteInformacion"] = this.telefonoRemitenteInformacion;
        data["correoRemitenteInformacion1"] = this.correoRemitenteInformacion1;
        data["correoRemitenteInformacion2"] = this.correoRemitenteInformacion2;
        return data;
    }
}

export interface IReporteBinomio {
    idGestante?: number;
    idBinomio?: number;
    nombreIPSAtencionVIH?: string | undefined;
    nombreRemitenteInformacion?: string | undefined;
    cargoRemitenteInformacion?: string | undefined;
    telefonoRemitenteInformacion?: string | undefined;
    correoRemitenteInformacion1?: string | undefined;
    correoRemitenteInformacion2?: string | undefined;
}

export class ReporteEAPB implements IReporteEAPB {
    idGestante?: number;
    idReporteEAPB?: number;
    fechaReporte?: Date;
    nombreEAPB?: string | undefined;
    nombreRemitenteInformacion?: string | undefined;
    cargoRemitenteInformacion?: string | undefined;
    telefonoMovilRemitenteInformacion?: string | undefined;
    telefonoFijoRemitenteInformacion?: string | undefined;
    correoRemitenteInformacion1?: string | undefined;
    correoRemitenteInformacion2?: string | undefined;

    constructor(data?: IReporteEAPB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idGestante = _data["idGestante"];
            this.idReporteEAPB = _data["idReporteEAPB"];
            this.fechaReporte = _data["fechaReporte"] ? new Date(_data["fechaReporte"].toString()) : <any>undefined;
            this.nombreEAPB = _data["nombreEAPB"];
            this.nombreRemitenteInformacion = _data["nombreRemitenteInformacion"];
            this.cargoRemitenteInformacion = _data["cargoRemitenteInformacion"];
            this.telefonoMovilRemitenteInformacion = _data["telefonoMovilRemitenteInformacion"];
            this.telefonoFijoRemitenteInformacion = _data["telefonoFijoRemitenteInformacion"];
            this.correoRemitenteInformacion1 = _data["correoRemitenteInformacion1"];
            this.correoRemitenteInformacion2 = _data["correoRemitenteInformacion2"];
        }
    }

    static fromJS(data: any): ReporteEAPB {
        data = typeof data === 'object' ? data : {};
        let result = new ReporteEAPB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idGestante"] = this.idGestante;
        data["idReporteEAPB"] = this.idReporteEAPB;
        data["fechaReporte"] = this.fechaReporte ? this.fechaReporte.toISOString() : <any>undefined;
        data["nombreEAPB"] = this.nombreEAPB;
        data["nombreRemitenteInformacion"] = this.nombreRemitenteInformacion;
        data["cargoRemitenteInformacion"] = this.cargoRemitenteInformacion;
        data["telefonoMovilRemitenteInformacion"] = this.telefonoMovilRemitenteInformacion;
        data["telefonoFijoRemitenteInformacion"] = this.telefonoFijoRemitenteInformacion;
        data["correoRemitenteInformacion1"] = this.correoRemitenteInformacion1;
        data["correoRemitenteInformacion2"] = this.correoRemitenteInformacion2;
        return data;
    }
}

export interface IReporteEAPB {
    idGestante?: number;
    idReporteEAPB?: number;
    fechaReporte?: Date;
    nombreEAPB?: string | undefined;
    nombreRemitenteInformacion?: string | undefined;
    cargoRemitenteInformacion?: string | undefined;
    telefonoMovilRemitenteInformacion?: string | undefined;
    telefonoFijoRemitenteInformacion?: string | undefined;
    correoRemitenteInformacion1?: string | undefined;
    correoRemitenteInformacion2?: string | undefined;
}

export class RetratamientoMaternoGestacional implements IRetratamientoMaternoGestacional {
    idRetratamientoMaternoGestacional?: number;
    idTratamientoMaternoEstadioClinico?: number;
    requirioTratamiento?: number;
    idCausaRetratamiento?: number;
    aplicaronPenicilinaBenzatinica?: number;

    constructor(data?: IRetratamientoMaternoGestacional) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idRetratamientoMaternoGestacional = _data["idRetratamientoMaternoGestacional"];
            this.idTratamientoMaternoEstadioClinico = _data["idTratamientoMaternoEstadioClinico"];
            this.requirioTratamiento = _data["requirioTratamiento"];
            this.idCausaRetratamiento = _data["idCausaRetratamiento"];
            this.aplicaronPenicilinaBenzatinica = _data["aplicaronPenicilinaBenzatinica"];
        }
    }

    static fromJS(data: any): RetratamientoMaternoGestacional {
        data = typeof data === 'object' ? data : {};
        let result = new RetratamientoMaternoGestacional();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idRetratamientoMaternoGestacional"] = this.idRetratamientoMaternoGestacional;
        data["idTratamientoMaternoEstadioClinico"] = this.idTratamientoMaternoEstadioClinico;
        data["requirioTratamiento"] = this.requirioTratamiento;
        data["idCausaRetratamiento"] = this.idCausaRetratamiento;
        data["aplicaronPenicilinaBenzatinica"] = this.aplicaronPenicilinaBenzatinica;
        return data;
    }
}

export interface IRetratamientoMaternoGestacional {
    idRetratamientoMaternoGestacional?: number;
    idTratamientoMaternoEstadioClinico?: number;
    requirioTratamiento?: number;
    idCausaRetratamiento?: number;
    aplicaronPenicilinaBenzatinica?: number;
}

export class SeguimientoContactoSexual implements ISeguimientoContactoSexual {
    idSeguimientoContactoSexual?: number;
    idGestanteControl?: number;
    seNotifico?: number;
    seRealizoTratamiento?: number;
    seAplicoPenicilinaBenzatinica?: number;
    idDosisPenicilinaBenzatinica?: number;
    fechaAplicacionPenicilinaBenzatinica?: Date;
    nombreMedicamentoDiferentePenicilinaBenzatinica?: string | undefined;

    constructor(data?: ISeguimientoContactoSexual) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSeguimientoContactoSexual = _data["idSeguimientoContactoSexual"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.seNotifico = _data["seNotifico"];
            this.seRealizoTratamiento = _data["seRealizoTratamiento"];
            this.seAplicoPenicilinaBenzatinica = _data["seAplicoPenicilinaBenzatinica"];
            this.idDosisPenicilinaBenzatinica = _data["idDosisPenicilinaBenzatinica"];
            this.fechaAplicacionPenicilinaBenzatinica = _data["fechaAplicacionPenicilinaBenzatinica"] ? new Date(_data["fechaAplicacionPenicilinaBenzatinica"].toString()) : <any>undefined;
            this.nombreMedicamentoDiferentePenicilinaBenzatinica = _data["nombreMedicamentoDiferentePenicilinaBenzatinica"];
        }
    }

    static fromJS(data: any): SeguimientoContactoSexual {
        data = typeof data === 'object' ? data : {};
        let result = new SeguimientoContactoSexual();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSeguimientoContactoSexual"] = this.idSeguimientoContactoSexual;
        data["idGestanteControl"] = this.idGestanteControl;
        data["seNotifico"] = this.seNotifico;
        data["seRealizoTratamiento"] = this.seRealizoTratamiento;
        data["seAplicoPenicilinaBenzatinica"] = this.seAplicoPenicilinaBenzatinica;
        data["idDosisPenicilinaBenzatinica"] = this.idDosisPenicilinaBenzatinica;
        data["fechaAplicacionPenicilinaBenzatinica"] = this.fechaAplicacionPenicilinaBenzatinica ? this.fechaAplicacionPenicilinaBenzatinica.toISOString() : <any>undefined;
        data["nombreMedicamentoDiferentePenicilinaBenzatinica"] = this.nombreMedicamentoDiferentePenicilinaBenzatinica;
        return data;
    }
}

export interface ISeguimientoContactoSexual {
    idSeguimientoContactoSexual?: number;
    idGestanteControl?: number;
    seNotifico?: number;
    seRealizoTratamiento?: number;
    seAplicoPenicilinaBenzatinica?: number;
    idDosisPenicilinaBenzatinica?: number;
    fechaAplicacionPenicilinaBenzatinica?: Date;
    nombreMedicamentoDiferentePenicilinaBenzatinica?: string | undefined;
}

export class SeguimientoNinoExpuestoChagas implements ISeguimientoNinoExpuestoChagas {
    idSeguimientoNinoExpuesto?: number;
    idDiagnosticoNinoExpuesto?: number;
    fechaNacimiento?: Date;
    idCondicionRecienNacido?: number;
    idNumeroProductosNacimiento?: number;
    edadGestacionalNacimientoSemanas?: number;
    pesoGramos?: number;
    idSexo?: number;
    idTipoParto?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradoraEAPB?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;

    constructor(data?: ISeguimientoNinoExpuestoChagas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSeguimientoNinoExpuesto = _data["idSeguimientoNinoExpuesto"];
            this.idDiagnosticoNinoExpuesto = _data["idDiagnosticoNinoExpuesto"];
            this.fechaNacimiento = _data["fechaNacimiento"] ? new Date(_data["fechaNacimiento"].toString()) : <any>undefined;
            this.idCondicionRecienNacido = _data["idCondicionRecienNacido"];
            this.idNumeroProductosNacimiento = _data["idNumeroProductosNacimiento"];
            this.edadGestacionalNacimientoSemanas = _data["edadGestacionalNacimientoSemanas"];
            this.pesoGramos = _data["pesoGramos"];
            this.idSexo = _data["idSexo"];
            this.idTipoParto = _data["idTipoParto"];
            this.idTipoRegimenSalud = _data["idTipoRegimenSalud"];
            this.nombreAseguradoraEAPB = _data["nombreAseguradoraEAPB"];
            this.nombresApellidos = _data["nombresApellidos"];
            this.idTipoDocumento = _data["idTipoDocumento"];
            this.numeroIdentificacion = _data["numeroIdentificacion"];
        }
    }

    static fromJS(data: any): SeguimientoNinoExpuestoChagas {
        data = typeof data === 'object' ? data : {};
        let result = new SeguimientoNinoExpuestoChagas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSeguimientoNinoExpuesto"] = this.idSeguimientoNinoExpuesto;
        data["idDiagnosticoNinoExpuesto"] = this.idDiagnosticoNinoExpuesto;
        data["fechaNacimiento"] = this.fechaNacimiento ? this.fechaNacimiento.toISOString() : <any>undefined;
        data["idCondicionRecienNacido"] = this.idCondicionRecienNacido;
        data["idNumeroProductosNacimiento"] = this.idNumeroProductosNacimiento;
        data["edadGestacionalNacimientoSemanas"] = this.edadGestacionalNacimientoSemanas;
        data["pesoGramos"] = this.pesoGramos;
        data["idSexo"] = this.idSexo;
        data["idTipoParto"] = this.idTipoParto;
        data["idTipoRegimenSalud"] = this.idTipoRegimenSalud;
        data["nombreAseguradoraEAPB"] = this.nombreAseguradoraEAPB;
        data["nombresApellidos"] = this.nombresApellidos;
        data["idTipoDocumento"] = this.idTipoDocumento;
        data["numeroIdentificacion"] = this.numeroIdentificacion;
        return data;
    }
}

export interface ISeguimientoNinoExpuestoChagas {
    idSeguimientoNinoExpuesto?: number;
    idDiagnosticoNinoExpuesto?: number;
    fechaNacimiento?: Date;
    idCondicionRecienNacido?: number;
    idNumeroProductosNacimiento?: number;
    edadGestacionalNacimientoSemanas?: number;
    pesoGramos?: number;
    idSexo?: number;
    idTipoParto?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradoraEAPB?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;
}

export class SeguimientoNinoExpuestoHB implements ISeguimientoNinoExpuestoHB {
    idSeguimientoNinoExpuesto?: number;
    idGestanteControl?: number;
    idCondicionRecienNacido?: number;
    edadGestacionalNacimientoSemanas?: number;
    idTipoParto?: number;
    idNumeroProductosNacimiento?: number;
    fechaParto?: Date;
    idSexo?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    direccionTerritorial?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;
    aplicaronDosisVacunaRecienNacido?: number;
    idTiempoAplicacionVacuna?: number;
    aplicaronInmunoglobulinaRecienNacido?: number;
    idTiempoAplicacionInmonoglobulina?: number;

    constructor(data?: ISeguimientoNinoExpuestoHB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSeguimientoNinoExpuesto = _data["idSeguimientoNinoExpuesto"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idCondicionRecienNacido = _data["idCondicionRecienNacido"];
            this.edadGestacionalNacimientoSemanas = _data["edadGestacionalNacimientoSemanas"];
            this.idTipoParto = _data["idTipoParto"];
            this.idNumeroProductosNacimiento = _data["idNumeroProductosNacimiento"];
            this.fechaParto = _data["fechaParto"] ? new Date(_data["fechaParto"].toString()) : <any>undefined;
            this.idSexo = _data["idSexo"];
            this.idTipoRegimenSalud = _data["idTipoRegimenSalud"];
            this.nombreAseguradora = _data["nombreAseguradora"];
            this.direccionTerritorial = _data["direccionTerritorial"];
            this.nombresApellidos = _data["nombresApellidos"];
            this.idTipoDocumento = _data["idTipoDocumento"];
            this.numeroIdentificacion = _data["numeroIdentificacion"];
            this.aplicaronDosisVacunaRecienNacido = _data["aplicaronDosisVacunaRecienNacido"];
            this.idTiempoAplicacionVacuna = _data["idTiempoAplicacionVacuna"];
            this.aplicaronInmunoglobulinaRecienNacido = _data["aplicaronInmunoglobulinaRecienNacido"];
            this.idTiempoAplicacionInmonoglobulina = _data["idTiempoAplicacionInmonoglobulina"];
        }
    }

    static fromJS(data: any): SeguimientoNinoExpuestoHB {
        data = typeof data === 'object' ? data : {};
        let result = new SeguimientoNinoExpuestoHB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSeguimientoNinoExpuesto"] = this.idSeguimientoNinoExpuesto;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idCondicionRecienNacido"] = this.idCondicionRecienNacido;
        data["edadGestacionalNacimientoSemanas"] = this.edadGestacionalNacimientoSemanas;
        data["idTipoParto"] = this.idTipoParto;
        data["idNumeroProductosNacimiento"] = this.idNumeroProductosNacimiento;
        data["fechaParto"] = this.fechaParto ? this.fechaParto.toISOString() : <any>undefined;
        data["idSexo"] = this.idSexo;
        data["idTipoRegimenSalud"] = this.idTipoRegimenSalud;
        data["nombreAseguradora"] = this.nombreAseguradora;
        data["direccionTerritorial"] = this.direccionTerritorial;
        data["nombresApellidos"] = this.nombresApellidos;
        data["idTipoDocumento"] = this.idTipoDocumento;
        data["numeroIdentificacion"] = this.numeroIdentificacion;
        data["aplicaronDosisVacunaRecienNacido"] = this.aplicaronDosisVacunaRecienNacido;
        data["idTiempoAplicacionVacuna"] = this.idTiempoAplicacionVacuna;
        data["aplicaronInmunoglobulinaRecienNacido"] = this.aplicaronInmunoglobulinaRecienNacido;
        data["idTiempoAplicacionInmonoglobulina"] = this.idTiempoAplicacionInmonoglobulina;
        return data;
    }
}

export interface ISeguimientoNinoExpuestoHB {
    idSeguimientoNinoExpuesto?: number;
    idGestanteControl?: number;
    idCondicionRecienNacido?: number;
    edadGestacionalNacimientoSemanas?: number;
    idTipoParto?: number;
    idNumeroProductosNacimiento?: number;
    fechaParto?: Date;
    idSexo?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    direccionTerritorial?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;
    aplicaronDosisVacunaRecienNacido?: number;
    idTiempoAplicacionVacuna?: number;
    aplicaronInmunoglobulinaRecienNacido?: number;
    idTiempoAplicacionInmonoglobulina?: number;
}

export class SeguimientoNinoPrimerAnio implements ISeguimientoNinoPrimerAnio {
    idSeguimientoNinoPrimerAnio?: number;
    idDiagnosticoEIntervencionNino?: number;
    seRealizoSeguimiento?: number;
    idTipoPruebaNoTreponemica?: number;
    fechaResultado?: Date;
    idDilucionesPruebaNoTreponemica?: number;
    cumpleCriteriosCuracion?: number;

    constructor(data?: ISeguimientoNinoPrimerAnio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSeguimientoNinoPrimerAnio = _data["idSeguimientoNinoPrimerAnio"];
            this.idDiagnosticoEIntervencionNino = _data["idDiagnosticoEIntervencionNino"];
            this.seRealizoSeguimiento = _data["seRealizoSeguimiento"];
            this.idTipoPruebaNoTreponemica = _data["idTipoPruebaNoTreponemica"];
            this.fechaResultado = _data["fechaResultado"] ? new Date(_data["fechaResultado"].toString()) : <any>undefined;
            this.idDilucionesPruebaNoTreponemica = _data["idDilucionesPruebaNoTreponemica"];
            this.cumpleCriteriosCuracion = _data["cumpleCriteriosCuracion"];
        }
    }

    static fromJS(data: any): SeguimientoNinoPrimerAnio {
        data = typeof data === 'object' ? data : {};
        let result = new SeguimientoNinoPrimerAnio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSeguimientoNinoPrimerAnio"] = this.idSeguimientoNinoPrimerAnio;
        data["idDiagnosticoEIntervencionNino"] = this.idDiagnosticoEIntervencionNino;
        data["seRealizoSeguimiento"] = this.seRealizoSeguimiento;
        data["idTipoPruebaNoTreponemica"] = this.idTipoPruebaNoTreponemica;
        data["fechaResultado"] = this.fechaResultado ? this.fechaResultado.toISOString() : <any>undefined;
        data["idDilucionesPruebaNoTreponemica"] = this.idDilucionesPruebaNoTreponemica;
        data["cumpleCriteriosCuracion"] = this.cumpleCriteriosCuracion;
        return data;
    }
}

export interface ISeguimientoNinoPrimerAnio {
    idSeguimientoNinoPrimerAnio?: number;
    idDiagnosticoEIntervencionNino?: number;
    seRealizoSeguimiento?: number;
    idTipoPruebaNoTreponemica?: number;
    fechaResultado?: Date;
    idDilucionesPruebaNoTreponemica?: number;
    cumpleCriteriosCuracion?: number;
}

export class SeguimientoSerologicoGestante implements ISeguimientoSerologicoGestante {
    idSeguimientoSerologicoGestante?: number;
    idTratamientoMaternoEstadioClinico?: number;
    idTipoPruebaNoTreponemicaDuranteGestacion?: number;
    fechaResultadoPruebaNoTreponemica?: Date;
    idDilucionesPruebaNoTreponemicaEsReactiva?: number;
    edadGestacionalRealizacionPruebaNoTreponemica?: number;

    constructor(data?: ISeguimientoSerologicoGestante) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSeguimientoSerologicoGestante = _data["idSeguimientoSerologicoGestante"];
            this.idTratamientoMaternoEstadioClinico = _data["idTratamientoMaternoEstadioClinico"];
            this.idTipoPruebaNoTreponemicaDuranteGestacion = _data["idTipoPruebaNoTreponemicaDuranteGestacion"];
            this.fechaResultadoPruebaNoTreponemica = _data["fechaResultadoPruebaNoTreponemica"] ? new Date(_data["fechaResultadoPruebaNoTreponemica"].toString()) : <any>undefined;
            this.idDilucionesPruebaNoTreponemicaEsReactiva = _data["idDilucionesPruebaNoTreponemicaEsReactiva"];
            this.edadGestacionalRealizacionPruebaNoTreponemica = _data["edadGestacionalRealizacionPruebaNoTreponemica"];
        }
    }

    static fromJS(data: any): SeguimientoSerologicoGestante {
        data = typeof data === 'object' ? data : {};
        let result = new SeguimientoSerologicoGestante();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSeguimientoSerologicoGestante"] = this.idSeguimientoSerologicoGestante;
        data["idTratamientoMaternoEstadioClinico"] = this.idTratamientoMaternoEstadioClinico;
        data["idTipoPruebaNoTreponemicaDuranteGestacion"] = this.idTipoPruebaNoTreponemicaDuranteGestacion;
        data["fechaResultadoPruebaNoTreponemica"] = this.fechaResultadoPruebaNoTreponemica ? this.fechaResultadoPruebaNoTreponemica.toISOString() : <any>undefined;
        data["idDilucionesPruebaNoTreponemicaEsReactiva"] = this.idDilucionesPruebaNoTreponemicaEsReactiva;
        data["edadGestacionalRealizacionPruebaNoTreponemica"] = this.edadGestacionalRealizacionPruebaNoTreponemica;
        return data;
    }
}

export interface ISeguimientoSerologicoGestante {
    idSeguimientoSerologicoGestante?: number;
    idTratamientoMaternoEstadioClinico?: number;
    idTipoPruebaNoTreponemicaDuranteGestacion?: number;
    fechaResultadoPruebaNoTreponemica?: Date;
    idDilucionesPruebaNoTreponemicaEsReactiva?: number;
    edadGestacionalRealizacionPruebaNoTreponemica?: number;
}

export class SituacionGestanteEmbarazoActual implements ISituacionGestanteEmbarazoActual {
    idSituacionGestanteEmbarazoActual?: number;
    idGestanteControl?: number;
    idSituacionGestante?: number;
    fechaParto?: Date;
    idCondicionRecienNacido?: number;
    idNumeroProductosNacimiento?: number;
    edadGestacionalNacimientoSemanas?: number;
    pesoRecienNacidoGramos?: number;
    idSexo?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    direccionTerritorial?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;

    constructor(data?: ISituacionGestanteEmbarazoActual) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idSituacionGestanteEmbarazoActual = _data["idSituacionGestanteEmbarazoActual"];
            this.idGestanteControl = _data["idGestanteControl"];
            this.idSituacionGestante = _data["idSituacionGestante"];
            this.fechaParto = _data["fechaParto"] ? new Date(_data["fechaParto"].toString()) : <any>undefined;
            this.idCondicionRecienNacido = _data["idCondicionRecienNacido"];
            this.idNumeroProductosNacimiento = _data["idNumeroProductosNacimiento"];
            this.edadGestacionalNacimientoSemanas = _data["edadGestacionalNacimientoSemanas"];
            this.pesoRecienNacidoGramos = _data["pesoRecienNacidoGramos"];
            this.idSexo = _data["idSexo"];
            this.idTipoRegimenSalud = _data["idTipoRegimenSalud"];
            this.nombreAseguradora = _data["nombreAseguradora"];
            this.direccionTerritorial = _data["direccionTerritorial"];
            this.nombresApellidos = _data["nombresApellidos"];
            this.idTipoDocumento = _data["idTipoDocumento"];
            this.numeroIdentificacion = _data["numeroIdentificacion"];
        }
    }

    static fromJS(data: any): SituacionGestanteEmbarazoActual {
        data = typeof data === 'object' ? data : {};
        let result = new SituacionGestanteEmbarazoActual();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idSituacionGestanteEmbarazoActual"] = this.idSituacionGestanteEmbarazoActual;
        data["idGestanteControl"] = this.idGestanteControl;
        data["idSituacionGestante"] = this.idSituacionGestante;
        data["fechaParto"] = this.fechaParto ? this.fechaParto.toISOString() : <any>undefined;
        data["idCondicionRecienNacido"] = this.idCondicionRecienNacido;
        data["idNumeroProductosNacimiento"] = this.idNumeroProductosNacimiento;
        data["edadGestacionalNacimientoSemanas"] = this.edadGestacionalNacimientoSemanas;
        data["pesoRecienNacidoGramos"] = this.pesoRecienNacidoGramos;
        data["idSexo"] = this.idSexo;
        data["idTipoRegimenSalud"] = this.idTipoRegimenSalud;
        data["nombreAseguradora"] = this.nombreAseguradora;
        data["direccionTerritorial"] = this.direccionTerritorial;
        data["nombresApellidos"] = this.nombresApellidos;
        data["idTipoDocumento"] = this.idTipoDocumento;
        data["numeroIdentificacion"] = this.numeroIdentificacion;
        return data;
    }
}

export interface ISituacionGestanteEmbarazoActual {
    idSituacionGestanteEmbarazoActual?: number;
    idGestanteControl?: number;
    idSituacionGestante?: number;
    fechaParto?: Date;
    idCondicionRecienNacido?: number;
    idNumeroProductosNacimiento?: number;
    edadGestacionalNacimientoSemanas?: number;
    pesoRecienNacidoGramos?: number;
    idSexo?: number;
    idTipoRegimenSalud?: number;
    nombreAseguradora?: string | undefined;
    direccionTerritorial?: string | undefined;
    nombresApellidos?: string | undefined;
    idTipoDocumento?: number;
    numeroIdentificacion?: string | undefined;
}

export class TratamientoMaternoChagas implements ITratamientoMaternoChagas {
    idTratamientoMaterno?: number;
    idAlgoritmo?: number;
    benznidazolX60Dias?: number;
    fechaInicioTratamiento?: Date;
    nufurtimoxX60Dias?: number;
    idNufurtimoxControlesMedicos?: number;
    finalizacionLactanciaMaterna?: number;
    metodoAnticonceptivoUtilizadoDuranteTratamiento?: string | undefined;

    constructor(data?: ITratamientoMaternoChagas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTratamientoMaterno = _data["idTratamientoMaterno"];
            this.idAlgoritmo = _data["idAlgoritmo"];
            this.benznidazolX60Dias = _data["benznidazolX60Dias"];
            this.fechaInicioTratamiento = _data["fechaInicioTratamiento"] ? new Date(_data["fechaInicioTratamiento"].toString()) : <any>undefined;
            this.nufurtimoxX60Dias = _data["nufurtimoxX60Dias"];
            this.idNufurtimoxControlesMedicos = _data["idNufurtimoxControlesMedicos"];
            this.finalizacionLactanciaMaterna = _data["finalizacionLactanciaMaterna"];
            this.metodoAnticonceptivoUtilizadoDuranteTratamiento = _data["metodoAnticonceptivoUtilizadoDuranteTratamiento"];
        }
    }

    static fromJS(data: any): TratamientoMaternoChagas {
        data = typeof data === 'object' ? data : {};
        let result = new TratamientoMaternoChagas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTratamientoMaterno"] = this.idTratamientoMaterno;
        data["idAlgoritmo"] = this.idAlgoritmo;
        data["benznidazolX60Dias"] = this.benznidazolX60Dias;
        data["fechaInicioTratamiento"] = this.fechaInicioTratamiento ? this.fechaInicioTratamiento.toISOString() : <any>undefined;
        data["nufurtimoxX60Dias"] = this.nufurtimoxX60Dias;
        data["idNufurtimoxControlesMedicos"] = this.idNufurtimoxControlesMedicos;
        data["finalizacionLactanciaMaterna"] = this.finalizacionLactanciaMaterna;
        data["metodoAnticonceptivoUtilizadoDuranteTratamiento"] = this.metodoAnticonceptivoUtilizadoDuranteTratamiento;
        return data;
    }
}

export interface ITratamientoMaternoChagas {
    idTratamientoMaterno?: number;
    idAlgoritmo?: number;
    benznidazolX60Dias?: number;
    fechaInicioTratamiento?: Date;
    nufurtimoxX60Dias?: number;
    idNufurtimoxControlesMedicos?: number;
    finalizacionLactanciaMaterna?: number;
    metodoAnticonceptivoUtilizadoDuranteTratamiento?: string | undefined;
}

export class TratamientoMaternoEstadioClinico implements ITratamientoMaternoEstadioClinico {
    idTratamientoMaternoEstadioClinico?: number;
    idDiagnosticoMaterno?: number;
    idClasificacionEstadioClinico?: number;
    aplicaronPenicilinaBenzatinica?: number;
    idResultadoManejoSifilisGestacional?: number;
    seRealizoDesensibilizacionAplicacionPenicilinaBenzatinica?: number;
    idResultadoPrevenirSifilisCongenita?: number;

    constructor(data?: ITratamientoMaternoEstadioClinico) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTratamientoMaternoEstadioClinico = _data["idTratamientoMaternoEstadioClinico"];
            this.idDiagnosticoMaterno = _data["idDiagnosticoMaterno"];
            this.idClasificacionEstadioClinico = _data["idClasificacionEstadioClinico"];
            this.aplicaronPenicilinaBenzatinica = _data["aplicaronPenicilinaBenzatinica"];
            this.idResultadoManejoSifilisGestacional = _data["idResultadoManejoSifilisGestacional"];
            this.seRealizoDesensibilizacionAplicacionPenicilinaBenzatinica = _data["seRealizoDesensibilizacionAplicacionPenicilinaBenzatinica"];
            this.idResultadoPrevenirSifilisCongenita = _data["idResultadoPrevenirSifilisCongenita"];
        }
    }

    static fromJS(data: any): TratamientoMaternoEstadioClinico {
        data = typeof data === 'object' ? data : {};
        let result = new TratamientoMaternoEstadioClinico();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTratamientoMaternoEstadioClinico"] = this.idTratamientoMaternoEstadioClinico;
        data["idDiagnosticoMaterno"] = this.idDiagnosticoMaterno;
        data["idClasificacionEstadioClinico"] = this.idClasificacionEstadioClinico;
        data["aplicaronPenicilinaBenzatinica"] = this.aplicaronPenicilinaBenzatinica;
        data["idResultadoManejoSifilisGestacional"] = this.idResultadoManejoSifilisGestacional;
        data["seRealizoDesensibilizacionAplicacionPenicilinaBenzatinica"] = this.seRealizoDesensibilizacionAplicacionPenicilinaBenzatinica;
        data["idResultadoPrevenirSifilisCongenita"] = this.idResultadoPrevenirSifilisCongenita;
        return data;
    }
}

export interface ITratamientoMaternoEstadioClinico {
    idTratamientoMaternoEstadioClinico?: number;
    idDiagnosticoMaterno?: number;
    idClasificacionEstadioClinico?: number;
    aplicaronPenicilinaBenzatinica?: number;
    idResultadoManejoSifilisGestacional?: number;
    seRealizoDesensibilizacionAplicacionPenicilinaBenzatinica?: number;
    idResultadoPrevenirSifilisCongenita?: number;
}

export class TratamientoSeguimientoGestanteHB implements ITratamientoSeguimientoGestanteHB {
    idTratamientoSeguimiento?: number;
    idDiagnosticoGestante?: number;
    recibioTratamientoAntesEmbarazo?: number;
    requireTratamientoDuranteEmbarazoActual?: number;
    edadGestacionalRequiereInicioTratamientoSemana?: number;
    nombreMedicamentoTratamiento?: string | undefined;
    idSituacionGestante?: number;

    constructor(data?: ITratamientoSeguimientoGestanteHB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTratamientoSeguimiento = _data["idTratamientoSeguimiento"];
            this.idDiagnosticoGestante = _data["idDiagnosticoGestante"];
            this.recibioTratamientoAntesEmbarazo = _data["recibioTratamientoAntesEmbarazo"];
            this.requireTratamientoDuranteEmbarazoActual = _data["requireTratamientoDuranteEmbarazoActual"];
            this.edadGestacionalRequiereInicioTratamientoSemana = _data["edadGestacionalRequiereInicioTratamientoSemana"];
            this.nombreMedicamentoTratamiento = _data["nombreMedicamentoTratamiento"];
            this.idSituacionGestante = _data["idSituacionGestante"];
        }
    }

    static fromJS(data: any): TratamientoSeguimientoGestanteHB {
        data = typeof data === 'object' ? data : {};
        let result = new TratamientoSeguimientoGestanteHB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTratamientoSeguimiento"] = this.idTratamientoSeguimiento;
        data["idDiagnosticoGestante"] = this.idDiagnosticoGestante;
        data["recibioTratamientoAntesEmbarazo"] = this.recibioTratamientoAntesEmbarazo;
        data["requireTratamientoDuranteEmbarazoActual"] = this.requireTratamientoDuranteEmbarazoActual;
        data["edadGestacionalRequiereInicioTratamientoSemana"] = this.edadGestacionalRequiereInicioTratamientoSemana;
        data["nombreMedicamentoTratamiento"] = this.nombreMedicamentoTratamiento;
        data["idSituacionGestante"] = this.idSituacionGestante;
        return data;
    }
}

export interface ITratamientoSeguimientoGestanteHB {
    idTratamientoSeguimiento?: number;
    idDiagnosticoGestante?: number;
    recibioTratamientoAntesEmbarazo?: number;
    requireTratamientoDuranteEmbarazoActual?: number;
    edadGestacionalRequiereInicioTratamientoSemana?: number;
    nombreMedicamentoTratamiento?: string | undefined;
    idSituacionGestante?: number;
}

export class TratamientoSeguimientoNinoChagas implements ITratamientoSeguimientoNinoChagas {
    idTratamientoSeguimientoNino?: number;
    idSeguimientoNinoExpuesto?: number;
    benznidazolX60Dias?: number;
    fechaInicioTratamiento?: Date;
    nufurtimoxX60Dias?: number;
    idNufurtimoxControlesMedicos?: number;
    esAntigenosTotales6Meses?: number;
    esAntigenosRecombinantes6Meses?: number;
    resultadoPruebaSerologica6Meses?: string | undefined;
    esAntigenosTotales12Meses?: number;
    esAntigenosRecombinantes12Meses?: number;
    resultadoPruebaSerologica12Meses?: string | undefined;
    esNinoCuradoChagas?: number;

    constructor(data?: ITratamientoSeguimientoNinoChagas) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idTratamientoSeguimientoNino = _data["idTratamientoSeguimientoNino"];
            this.idSeguimientoNinoExpuesto = _data["idSeguimientoNinoExpuesto"];
            this.benznidazolX60Dias = _data["benznidazolX60Dias"];
            this.fechaInicioTratamiento = _data["fechaInicioTratamiento"] ? new Date(_data["fechaInicioTratamiento"].toString()) : <any>undefined;
            this.nufurtimoxX60Dias = _data["nufurtimoxX60Dias"];
            this.idNufurtimoxControlesMedicos = _data["idNufurtimoxControlesMedicos"];
            this.esAntigenosTotales6Meses = _data["esAntigenosTotales6Meses"];
            this.esAntigenosRecombinantes6Meses = _data["esAntigenosRecombinantes6Meses"];
            this.resultadoPruebaSerologica6Meses = _data["resultadoPruebaSerologica6Meses"];
            this.esAntigenosTotales12Meses = _data["esAntigenosTotales12Meses"];
            this.esAntigenosRecombinantes12Meses = _data["esAntigenosRecombinantes12Meses"];
            this.resultadoPruebaSerologica12Meses = _data["resultadoPruebaSerologica12Meses"];
            this.esNinoCuradoChagas = _data["esNinoCuradoChagas"];
        }
    }

    static fromJS(data: any): TratamientoSeguimientoNinoChagas {
        data = typeof data === 'object' ? data : {};
        let result = new TratamientoSeguimientoNinoChagas();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idTratamientoSeguimientoNino"] = this.idTratamientoSeguimientoNino;
        data["idSeguimientoNinoExpuesto"] = this.idSeguimientoNinoExpuesto;
        data["benznidazolX60Dias"] = this.benznidazolX60Dias;
        data["fechaInicioTratamiento"] = this.fechaInicioTratamiento ? this.fechaInicioTratamiento.toISOString() : <any>undefined;
        data["nufurtimoxX60Dias"] = this.nufurtimoxX60Dias;
        data["idNufurtimoxControlesMedicos"] = this.idNufurtimoxControlesMedicos;
        data["esAntigenosTotales6Meses"] = this.esAntigenosTotales6Meses;
        data["esAntigenosRecombinantes6Meses"] = this.esAntigenosRecombinantes6Meses;
        data["resultadoPruebaSerologica6Meses"] = this.resultadoPruebaSerologica6Meses;
        data["esAntigenosTotales12Meses"] = this.esAntigenosTotales12Meses;
        data["esAntigenosRecombinantes12Meses"] = this.esAntigenosRecombinantes12Meses;
        data["resultadoPruebaSerologica12Meses"] = this.resultadoPruebaSerologica12Meses;
        data["esNinoCuradoChagas"] = this.esNinoCuradoChagas;
        return data;
    }
}

export interface ITratamientoSeguimientoNinoChagas {
    idTratamientoSeguimientoNino?: number;
    idSeguimientoNinoExpuesto?: number;
    benznidazolX60Dias?: number;
    fechaInicioTratamiento?: Date;
    nufurtimoxX60Dias?: number;
    idNufurtimoxControlesMedicos?: number;
    esAntigenosTotales6Meses?: number;
    esAntigenosRecombinantes6Meses?: number;
    resultadoPruebaSerologica6Meses?: string | undefined;
    esAntigenosTotales12Meses?: number;
    esAntigenosRecombinantes12Meses?: number;
    resultadoPruebaSerologica12Meses?: string | undefined;
    esNinoCuradoChagas?: number;
}

export class VacunacionHB implements IVacunacionHB {
    idVacuna?: number;
    idSeguimientoNinoExpuesto?: number;
    idDosisVacuna?: number;
    fechaAplicacion?: Date;

    constructor(data?: IVacunacionHB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idVacuna = _data["idVacuna"];
            this.idSeguimientoNinoExpuesto = _data["idSeguimientoNinoExpuesto"];
            this.idDosisVacuna = _data["idDosisVacuna"];
            this.fechaAplicacion = _data["fechaAplicacion"] ? new Date(_data["fechaAplicacion"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): VacunacionHB {
        data = typeof data === 'object' ? data : {};
        let result = new VacunacionHB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idVacuna"] = this.idVacuna;
        data["idSeguimientoNinoExpuesto"] = this.idSeguimientoNinoExpuesto;
        data["idDosisVacuna"] = this.idDosisVacuna;
        data["fechaAplicacion"] = this.fechaAplicacion ? this.fechaAplicacion.toISOString() : <any>undefined;
        return data;
    }
}

export interface IVacunacionHB {
    idVacuna?: number;
    idSeguimientoNinoExpuesto?: number;
    idDosisVacuna?: number;
    fechaAplicacion?: Date;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}